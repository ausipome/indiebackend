type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type UserWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
  readonly email?: Scalars["String"] | null;
  readonly stripeId?: Scalars["String"] | null;
};

export type UserWhereInput = {
  readonly AND?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly OR?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly NOT?: ReadonlyArray<UserWhereInput> | UserWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly password?: PasswordFilter | null;
  readonly stripeId?: StringFilter | null;
  readonly confirmed?: StringFilter | null;
  readonly address?: StringFilter | null;
  readonly address2?: StringFilter | null;
  readonly town?: StringFilter | null;
  readonly county?: StringFilter | null;
  readonly postcode?: StringFilter | null;
  readonly cart?: CartItemManyRelationFilter | null;
  readonly orders?: OrderManyRelationFilter | null;
  readonly role?: RoleWhereInput | null;
  readonly products?: ProductManyRelationFilter | null;
  readonly passwordResetToken?: PasswordFilter | null;
  readonly passwordResetIssuedAt?: DateTimeNullableFilter | null;
  readonly passwordResetRedeemedAt?: DateTimeNullableFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly mode?: QueryMode | null;
  readonly not?: NestedStringFilter | null;
};

export type QueryMode =
  | "default"
  | "insensitive";

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type PasswordFilter = {
  readonly isSet: Scalars["Boolean"];
};

export type CartItemManyRelationFilter = {
  readonly every?: CartItemWhereInput | null;
  readonly some?: CartItemWhereInput | null;
  readonly none?: CartItemWhereInput | null;
};

export type OrderManyRelationFilter = {
  readonly every?: OrderWhereInput | null;
  readonly some?: OrderWhereInput | null;
  readonly none?: OrderWhereInput | null;
};

export type ProductManyRelationFilter = {
  readonly every?: ProductWhereInput | null;
  readonly some?: ProductWhereInput | null;
  readonly none?: ProductWhereInput | null;
};

export type DateTimeNullableFilter = {
  readonly equals?: any | null;
  readonly in?: ReadonlyArray<any> | any | null;
  readonly notIn?: ReadonlyArray<any> | any | null;
  readonly lt?: any | null;
  readonly lte?: any | null;
  readonly gt?: any | null;
  readonly gte?: any | null;
  readonly not?: DateTimeNullableFilter | null;
};

export type UserOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly email?: OrderDirection | null;
  readonly stripeId?: OrderDirection | null;
  readonly confirmed?: OrderDirection | null;
  readonly address?: OrderDirection | null;
  readonly address2?: OrderDirection | null;
  readonly town?: OrderDirection | null;
  readonly county?: OrderDirection | null;
  readonly postcode?: OrderDirection | null;
  readonly passwordResetIssuedAt?: OrderDirection | null;
  readonly passwordResetRedeemedAt?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type UserUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly password?: Scalars["String"] | null;
  readonly stripeId?: Scalars["String"] | null;
  readonly confirmed?: Scalars["String"] | null;
  readonly address?: Scalars["String"] | null;
  readonly address2?: Scalars["String"] | null;
  readonly town?: Scalars["String"] | null;
  readonly county?: Scalars["String"] | null;
  readonly postcode?: Scalars["String"] | null;
  readonly cart?: CartItemRelateToManyForUpdateInput | null;
  readonly orders?: OrderRelateToManyForUpdateInput | null;
  readonly role?: RoleRelateToOneForUpdateInput | null;
  readonly products?: ProductRelateToManyForUpdateInput | null;
  readonly passwordResetToken?: Scalars["String"] | null;
  readonly passwordResetIssuedAt?: any | null;
  readonly passwordResetRedeemedAt?: any | null;
};

export type CartItemRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<CartItemWhereUniqueInput> | CartItemWhereUniqueInput | null;
  readonly set?: ReadonlyArray<CartItemWhereUniqueInput> | CartItemWhereUniqueInput | null;
  readonly create?: ReadonlyArray<CartItemCreateInput> | CartItemCreateInput | null;
  readonly connect?: ReadonlyArray<CartItemWhereUniqueInput> | CartItemWhereUniqueInput | null;
};

export type OrderRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<OrderWhereUniqueInput> | OrderWhereUniqueInput | null;
  readonly set?: ReadonlyArray<OrderWhereUniqueInput> | OrderWhereUniqueInput | null;
  readonly create?: ReadonlyArray<OrderCreateInput> | OrderCreateInput | null;
  readonly connect?: ReadonlyArray<OrderWhereUniqueInput> | OrderWhereUniqueInput | null;
};

export type RoleRelateToOneForUpdateInput = {
  readonly create?: RoleCreateInput | null;
  readonly connect?: RoleWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ProductRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<ProductWhereUniqueInput> | ProductWhereUniqueInput | null;
  readonly set?: ReadonlyArray<ProductWhereUniqueInput> | ProductWhereUniqueInput | null;
  readonly create?: ReadonlyArray<ProductCreateInput> | ProductCreateInput | null;
  readonly connect?: ReadonlyArray<ProductWhereUniqueInput> | ProductWhereUniqueInput | null;
};

export type UserUpdateArgs = {
  readonly where: UserWhereUniqueInput;
  readonly data: UserUpdateInput;
};

export type UserCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly password?: Scalars["String"] | null;
  readonly stripeId?: Scalars["String"] | null;
  readonly confirmed?: Scalars["String"] | null;
  readonly address?: Scalars["String"] | null;
  readonly address2?: Scalars["String"] | null;
  readonly town?: Scalars["String"] | null;
  readonly county?: Scalars["String"] | null;
  readonly postcode?: Scalars["String"] | null;
  readonly cart?: CartItemRelateToManyForCreateInput | null;
  readonly orders?: OrderRelateToManyForCreateInput | null;
  readonly role?: RoleRelateToOneForCreateInput | null;
  readonly products?: ProductRelateToManyForCreateInput | null;
  readonly passwordResetToken?: Scalars["String"] | null;
  readonly passwordResetIssuedAt?: any | null;
  readonly passwordResetRedeemedAt?: any | null;
};

export type CartItemRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<CartItemCreateInput> | CartItemCreateInput | null;
  readonly connect?: ReadonlyArray<CartItemWhereUniqueInput> | CartItemWhereUniqueInput | null;
};

export type OrderRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<OrderCreateInput> | OrderCreateInput | null;
  readonly connect?: ReadonlyArray<OrderWhereUniqueInput> | OrderWhereUniqueInput | null;
};

export type RoleRelateToOneForCreateInput = {
  readonly create?: RoleCreateInput | null;
  readonly connect?: RoleWhereUniqueInput | null;
};

export type ProductRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<ProductCreateInput> | ProductCreateInput | null;
  readonly connect?: ReadonlyArray<ProductWhereUniqueInput> | ProductWhereUniqueInput | null;
};

export type ProductWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type ProductWhereInput = {
  readonly AND?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly OR?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly NOT?: ReadonlyArray<ProductWhereInput> | ProductWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly description?: StringFilter | null;
  readonly photo?: ProductImageWhereInput | null;
  readonly status?: StringNullableFilter | null;
  readonly condition?: StringNullableFilter | null;
  readonly price?: IntNullableFilter | null;
  readonly email?: StringFilter | null;
  readonly user?: UserWhereInput | null;
};

export type StringNullableFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly mode?: QueryMode | null;
  readonly not?: NestedStringNullableFilter | null;
};

export type NestedStringNullableFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringNullableFilter | null;
};

export type IntNullableFilter = {
  readonly equals?: Scalars["Int"] | null;
  readonly in?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly notIn?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly lt?: Scalars["Int"] | null;
  readonly lte?: Scalars["Int"] | null;
  readonly gt?: Scalars["Int"] | null;
  readonly gte?: Scalars["Int"] | null;
  readonly not?: IntNullableFilter | null;
};

export type ProductOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly description?: OrderDirection | null;
  readonly status?: OrderDirection | null;
  readonly condition?: OrderDirection | null;
  readonly price?: OrderDirection | null;
  readonly email?: OrderDirection | null;
};

export type ProductUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForUpdateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly condition?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
  readonly email?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForUpdateInput | null;
};

export type ProductImageRelateToOneForUpdateInput = {
  readonly create?: ProductImageCreateInput | null;
  readonly connect?: ProductImageWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type UserRelateToOneForUpdateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ProductUpdateArgs = {
  readonly where: ProductWhereUniqueInput;
  readonly data: ProductUpdateInput;
};

export type ProductCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForCreateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly condition?: Scalars["String"] | null;
  readonly price?: Scalars["Int"] | null;
  readonly email?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForCreateInput | null;
};

export type ProductImageRelateToOneForCreateInput = {
  readonly create?: ProductImageCreateInput | null;
  readonly connect?: ProductImageWhereUniqueInput | null;
};

export type UserRelateToOneForCreateInput = {
  readonly create?: UserCreateInput | null;
  readonly connect?: UserWhereUniqueInput | null;
};

export type CloudinaryImageFormat = {
  readonly prettyName?: Scalars["String"] | null;
  readonly width?: Scalars["String"] | null;
  readonly height?: Scalars["String"] | null;
  readonly crop?: Scalars["String"] | null;
  readonly aspect_ratio?: Scalars["String"] | null;
  readonly gravity?: Scalars["String"] | null;
  readonly zoom?: Scalars["String"] | null;
  readonly x?: Scalars["String"] | null;
  readonly y?: Scalars["String"] | null;
  readonly format?: Scalars["String"] | null;
  readonly fetch_format?: Scalars["String"] | null;
  readonly quality?: Scalars["String"] | null;
  readonly radius?: Scalars["String"] | null;
  readonly angle?: Scalars["String"] | null;
  readonly effect?: Scalars["String"] | null;
  readonly opacity?: Scalars["String"] | null;
  readonly border?: Scalars["String"] | null;
  readonly background?: Scalars["String"] | null;
  readonly overlay?: Scalars["String"] | null;
  readonly underlay?: Scalars["String"] | null;
  readonly default_image?: Scalars["String"] | null;
  readonly delay?: Scalars["String"] | null;
  readonly color?: Scalars["String"] | null;
  readonly color_space?: Scalars["String"] | null;
  readonly dpr?: Scalars["String"] | null;
  readonly page?: Scalars["String"] | null;
  readonly density?: Scalars["String"] | null;
  readonly flags?: Scalars["String"] | null;
  readonly transformation?: Scalars["String"] | null;
};

export type ProductImageWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type ProductImageWhereInput = {
  readonly AND?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly OR?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly NOT?: ReadonlyArray<ProductImageWhereInput> | ProductImageWhereInput | null;
  readonly id?: IDFilter | null;
  readonly altText?: StringFilter | null;
  readonly product?: ProductWhereInput | null;
};

export type ProductImageOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly altText?: OrderDirection | null;
};

export type ProductImageUpdateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly product?: ProductRelateToOneForUpdateInput | null;
};

export type ProductRelateToOneForUpdateInput = {
  readonly create?: ProductCreateInput | null;
  readonly connect?: ProductWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ProductImageUpdateArgs = {
  readonly where: ProductImageWhereUniqueInput;
  readonly data: ProductImageUpdateInput;
};

export type ProductImageCreateInput = {
  readonly image?: any | null;
  readonly altText?: Scalars["String"] | null;
  readonly product?: ProductRelateToOneForCreateInput | null;
};

export type ProductRelateToOneForCreateInput = {
  readonly create?: ProductCreateInput | null;
  readonly connect?: ProductWhereUniqueInput | null;
};

export type CartItemWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type CartItemWhereInput = {
  readonly AND?: ReadonlyArray<CartItemWhereInput> | CartItemWhereInput | null;
  readonly OR?: ReadonlyArray<CartItemWhereInput> | CartItemWhereInput | null;
  readonly NOT?: ReadonlyArray<CartItemWhereInput> | CartItemWhereInput | null;
  readonly id?: IDFilter | null;
  readonly quantity?: IntFilter | null;
  readonly product?: ProductWhereInput | null;
  readonly user?: UserWhereInput | null;
};

export type IntFilter = {
  readonly equals?: Scalars["Int"] | null;
  readonly in?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly notIn?: ReadonlyArray<Scalars["Int"]> | Scalars["Int"] | null;
  readonly lt?: Scalars["Int"] | null;
  readonly lte?: Scalars["Int"] | null;
  readonly gt?: Scalars["Int"] | null;
  readonly gte?: Scalars["Int"] | null;
  readonly not?: IntFilter | null;
};

export type CartItemOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly quantity?: OrderDirection | null;
};

export type CartItemUpdateInput = {
  readonly quantity?: Scalars["Int"] | null;
  readonly product?: ProductRelateToOneForUpdateInput | null;
  readonly user?: UserRelateToOneForUpdateInput | null;
};

export type CartItemUpdateArgs = {
  readonly where: CartItemWhereUniqueInput;
  readonly data: CartItemUpdateInput;
};

export type CartItemCreateInput = {
  readonly quantity?: Scalars["Int"] | null;
  readonly product?: ProductRelateToOneForCreateInput | null;
  readonly user?: UserRelateToOneForCreateInput | null;
};

export type OrderItemWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type OrderItemWhereInput = {
  readonly AND?: ReadonlyArray<OrderItemWhereInput> | OrderItemWhereInput | null;
  readonly OR?: ReadonlyArray<OrderItemWhereInput> | OrderItemWhereInput | null;
  readonly NOT?: ReadonlyArray<OrderItemWhereInput> | OrderItemWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly description?: StringFilter | null;
  readonly photo?: ProductImageWhereInput | null;
  readonly price?: IntNullableFilter | null;
  readonly quantity?: IntNullableFilter | null;
  readonly order?: OrderWhereInput | null;
  readonly chat?: ChatManyRelationFilter | null;
  readonly status?: StringNullableFilter | null;
  readonly tracking?: StringFilter | null;
  readonly trackingCompany?: StringFilter | null;
  readonly email?: StringFilter | null;
  readonly user?: UserWhereInput | null;
  readonly timeStamp?: DateTimeNullableFilter | null;
  readonly date?: StringFilter | null;
};

export type ChatManyRelationFilter = {
  readonly every?: ChatWhereInput | null;
  readonly some?: ChatWhereInput | null;
  readonly none?: ChatWhereInput | null;
};

export type OrderItemOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly description?: OrderDirection | null;
  readonly price?: OrderDirection | null;
  readonly quantity?: OrderDirection | null;
  readonly status?: OrderDirection | null;
  readonly tracking?: OrderDirection | null;
  readonly trackingCompany?: OrderDirection | null;
  readonly email?: OrderDirection | null;
  readonly timeStamp?: OrderDirection | null;
  readonly date?: OrderDirection | null;
};

export type OrderItemUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForUpdateInput | null;
  readonly price?: Scalars["Int"] | null;
  readonly quantity?: Scalars["Int"] | null;
  readonly order?: OrderRelateToOneForUpdateInput | null;
  readonly chat?: ChatRelateToManyForUpdateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly tracking?: Scalars["String"] | null;
  readonly trackingCompany?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForUpdateInput | null;
  readonly timeStamp?: any | null;
  readonly date?: Scalars["String"] | null;
};

export type OrderRelateToOneForUpdateInput = {
  readonly create?: OrderCreateInput | null;
  readonly connect?: OrderWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ChatRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<ChatWhereUniqueInput> | ChatWhereUniqueInput | null;
  readonly set?: ReadonlyArray<ChatWhereUniqueInput> | ChatWhereUniqueInput | null;
  readonly create?: ReadonlyArray<ChatCreateInput> | ChatCreateInput | null;
  readonly connect?: ReadonlyArray<ChatWhereUniqueInput> | ChatWhereUniqueInput | null;
};

export type OrderItemUpdateArgs = {
  readonly where: OrderItemWhereUniqueInput;
  readonly data: OrderItemUpdateInput;
};

export type OrderItemCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly description?: Scalars["String"] | null;
  readonly photo?: ProductImageRelateToOneForCreateInput | null;
  readonly price?: Scalars["Int"] | null;
  readonly quantity?: Scalars["Int"] | null;
  readonly order?: OrderRelateToOneForCreateInput | null;
  readonly chat?: ChatRelateToManyForCreateInput | null;
  readonly status?: Scalars["String"] | null;
  readonly tracking?: Scalars["String"] | null;
  readonly trackingCompany?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly user?: UserRelateToOneForCreateInput | null;
  readonly timeStamp?: any | null;
  readonly date?: Scalars["String"] | null;
};

export type OrderRelateToOneForCreateInput = {
  readonly create?: OrderCreateInput | null;
  readonly connect?: OrderWhereUniqueInput | null;
};

export type ChatRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<ChatCreateInput> | ChatCreateInput | null;
  readonly connect?: ReadonlyArray<ChatWhereUniqueInput> | ChatWhereUniqueInput | null;
};

export type OrderWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type OrderWhereInput = {
  readonly AND?: ReadonlyArray<OrderWhereInput> | OrderWhereInput | null;
  readonly OR?: ReadonlyArray<OrderWhereInput> | OrderWhereInput | null;
  readonly NOT?: ReadonlyArray<OrderWhereInput> | OrderWhereInput | null;
  readonly id?: IDFilter | null;
  readonly total?: IntNullableFilter | null;
  readonly charge?: StringFilter | null;
  readonly items?: OrderItemManyRelationFilter | null;
  readonly user?: UserWhereInput | null;
  readonly timeStamp?: DateTimeNullableFilter | null;
  readonly date?: StringFilter | null;
};

export type OrderItemManyRelationFilter = {
  readonly every?: OrderItemWhereInput | null;
  readonly some?: OrderItemWhereInput | null;
  readonly none?: OrderItemWhereInput | null;
};

export type OrderOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly total?: OrderDirection | null;
  readonly charge?: OrderDirection | null;
  readonly timeStamp?: OrderDirection | null;
  readonly date?: OrderDirection | null;
};

export type OrderUpdateInput = {
  readonly total?: Scalars["Int"] | null;
  readonly charge?: Scalars["String"] | null;
  readonly items?: OrderItemRelateToManyForUpdateInput | null;
  readonly user?: UserRelateToOneForUpdateInput | null;
  readonly timeStamp?: any | null;
  readonly date?: Scalars["String"] | null;
};

export type OrderItemRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<OrderItemWhereUniqueInput> | OrderItemWhereUniqueInput | null;
  readonly set?: ReadonlyArray<OrderItemWhereUniqueInput> | OrderItemWhereUniqueInput | null;
  readonly create?: ReadonlyArray<OrderItemCreateInput> | OrderItemCreateInput | null;
  readonly connect?: ReadonlyArray<OrderItemWhereUniqueInput> | OrderItemWhereUniqueInput | null;
};

export type OrderUpdateArgs = {
  readonly where: OrderWhereUniqueInput;
  readonly data: OrderUpdateInput;
};

export type OrderCreateInput = {
  readonly total?: Scalars["Int"] | null;
  readonly charge?: Scalars["String"] | null;
  readonly items?: OrderItemRelateToManyForCreateInput | null;
  readonly user?: UserRelateToOneForCreateInput | null;
  readonly timeStamp?: any | null;
  readonly date?: Scalars["String"] | null;
};

export type OrderItemRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<OrderItemCreateInput> | OrderItemCreateInput | null;
  readonly connect?: ReadonlyArray<OrderItemWhereUniqueInput> | OrderItemWhereUniqueInput | null;
};

export type RoleWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type RoleWhereInput = {
  readonly AND?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null;
  readonly OR?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null;
  readonly NOT?: ReadonlyArray<RoleWhereInput> | RoleWhereInput | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly canManageProducts?: BooleanFilter | null;
  readonly canSeeOtherUsers?: BooleanFilter | null;
  readonly canManageUsers?: BooleanFilter | null;
  readonly canManageRoles?: BooleanFilter | null;
  readonly canManageCart?: BooleanFilter | null;
  readonly canManageOrders?: BooleanFilter | null;
  readonly assignedTo?: UserManyRelationFilter | null;
};

export type BooleanFilter = {
  readonly equals?: Scalars["Boolean"] | null;
  readonly not?: BooleanFilter | null;
};

export type UserManyRelationFilter = {
  readonly every?: UserWhereInput | null;
  readonly some?: UserWhereInput | null;
  readonly none?: UserWhereInput | null;
};

export type RoleOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
  readonly canManageProducts?: OrderDirection | null;
  readonly canSeeOtherUsers?: OrderDirection | null;
  readonly canManageUsers?: OrderDirection | null;
  readonly canManageRoles?: OrderDirection | null;
  readonly canManageCart?: OrderDirection | null;
  readonly canManageOrders?: OrderDirection | null;
};

export type RoleUpdateInput = {
  readonly name?: Scalars["String"] | null;
  readonly canManageProducts?: Scalars["Boolean"] | null;
  readonly canSeeOtherUsers?: Scalars["Boolean"] | null;
  readonly canManageUsers?: Scalars["Boolean"] | null;
  readonly canManageRoles?: Scalars["Boolean"] | null;
  readonly canManageCart?: Scalars["Boolean"] | null;
  readonly canManageOrders?: Scalars["Boolean"] | null;
  readonly assignedTo?: UserRelateToManyForUpdateInput | null;
};

export type UserRelateToManyForUpdateInput = {
  readonly disconnect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
  readonly set?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null;
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
};

export type RoleUpdateArgs = {
  readonly where: RoleWhereUniqueInput;
  readonly data: RoleUpdateInput;
};

export type RoleCreateInput = {
  readonly name?: Scalars["String"] | null;
  readonly canManageProducts?: Scalars["Boolean"] | null;
  readonly canSeeOtherUsers?: Scalars["Boolean"] | null;
  readonly canManageUsers?: Scalars["Boolean"] | null;
  readonly canManageRoles?: Scalars["Boolean"] | null;
  readonly canManageCart?: Scalars["Boolean"] | null;
  readonly canManageOrders?: Scalars["Boolean"] | null;
  readonly assignedTo?: UserRelateToManyForCreateInput | null;
};

export type UserRelateToManyForCreateInput = {
  readonly create?: ReadonlyArray<UserCreateInput> | UserCreateInput | null;
  readonly connect?: ReadonlyArray<UserWhereUniqueInput> | UserWhereUniqueInput | null;
};

export type ChatWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type ChatWhereInput = {
  readonly AND?: ReadonlyArray<ChatWhereInput> | ChatWhereInput | null;
  readonly OR?: ReadonlyArray<ChatWhereInput> | ChatWhereInput | null;
  readonly NOT?: ReadonlyArray<ChatWhereInput> | ChatWhereInput | null;
  readonly id?: IDFilter | null;
  readonly userFrom?: UserWhereInput | null;
  readonly item?: OrderItemWhereInput | null;
  readonly timeStamp?: DateTimeNullableFilter | null;
  readonly message?: StringFilter | null;
};

export type ChatOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly timeStamp?: OrderDirection | null;
  readonly message?: OrderDirection | null;
};

export type ChatUpdateInput = {
  readonly userFrom?: UserRelateToOneForUpdateInput | null;
  readonly item?: OrderItemRelateToOneForUpdateInput | null;
  readonly timeStamp?: any | null;
  readonly message?: Scalars["String"] | null;
};

export type OrderItemRelateToOneForUpdateInput = {
  readonly create?: OrderItemCreateInput | null;
  readonly connect?: OrderItemWhereUniqueInput | null;
  readonly disconnect?: Scalars["Boolean"] | null;
};

export type ChatUpdateArgs = {
  readonly where: ChatWhereUniqueInput;
  readonly data: ChatUpdateInput;
};

export type ChatCreateInput = {
  readonly userFrom?: UserRelateToOneForCreateInput | null;
  readonly item?: OrderItemRelateToOneForCreateInput | null;
  readonly timeStamp?: any | null;
  readonly message?: Scalars["String"] | null;
};

export type OrderItemRelateToOneForCreateInput = {
  readonly create?: OrderItemCreateInput | null;
  readonly connect?: OrderItemWhereUniqueInput | null;
};

export type CreateInitialUserInput = {
  readonly name?: Scalars["String"] | null;
  readonly email?: Scalars["String"] | null;
  readonly password?: Scalars["String"] | null;
};

export type PasswordResetRedemptionErrorCode =
  | "FAILURE"
  | "TOKEN_EXPIRED"
  | "TOKEN_REDEEMED";

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | "form"
  | "sidebar";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";

type ResolvedUserCreateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.UserCreateInput["name"];
  email?: import('.prisma/client').Prisma.UserCreateInput["email"];
  password?: import('.prisma/client').Prisma.UserCreateInput["password"];
  stripeId?: import('.prisma/client').Prisma.UserCreateInput["stripeId"];
  confirmed?: import('.prisma/client').Prisma.UserCreateInput["confirmed"];
  address?: import('.prisma/client').Prisma.UserCreateInput["address"];
  address2?: import('.prisma/client').Prisma.UserCreateInput["address2"];
  town?: import('.prisma/client').Prisma.UserCreateInput["town"];
  county?: import('.prisma/client').Prisma.UserCreateInput["county"];
  postcode?: import('.prisma/client').Prisma.UserCreateInput["postcode"];
  cart?: import('.prisma/client').Prisma.UserCreateInput["cart"];
  orders?: import('.prisma/client').Prisma.UserCreateInput["orders"];
  role?: import('.prisma/client').Prisma.UserCreateInput["role"];
  products?: import('.prisma/client').Prisma.UserCreateInput["products"];
  passwordResetToken?: import('.prisma/client').Prisma.UserCreateInput["passwordResetToken"];
  passwordResetIssuedAt?: import('.prisma/client').Prisma.UserCreateInput["passwordResetIssuedAt"];
  passwordResetRedeemedAt?: import('.prisma/client').Prisma.UserCreateInput["passwordResetRedeemedAt"];
};

type ResolvedUserUpdateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.UserUpdateInput["name"];
  email?: import('.prisma/client').Prisma.UserUpdateInput["email"];
  password?: import('.prisma/client').Prisma.UserUpdateInput["password"];
  stripeId?: import('.prisma/client').Prisma.UserUpdateInput["stripeId"];
  confirmed?: import('.prisma/client').Prisma.UserUpdateInput["confirmed"];
  address?: import('.prisma/client').Prisma.UserUpdateInput["address"];
  address2?: import('.prisma/client').Prisma.UserUpdateInput["address2"];
  town?: import('.prisma/client').Prisma.UserUpdateInput["town"];
  county?: import('.prisma/client').Prisma.UserUpdateInput["county"];
  postcode?: import('.prisma/client').Prisma.UserUpdateInput["postcode"];
  cart?: import('.prisma/client').Prisma.UserUpdateInput["cart"];
  orders?: import('.prisma/client').Prisma.UserUpdateInput["orders"];
  role?: import('.prisma/client').Prisma.UserUpdateInput["role"];
  products?: import('.prisma/client').Prisma.UserUpdateInput["products"];
  passwordResetToken?: import('.prisma/client').Prisma.UserUpdateInput["passwordResetToken"];
  passwordResetIssuedAt?: import('.prisma/client').Prisma.UserUpdateInput["passwordResetIssuedAt"];
  passwordResetRedeemedAt?: import('.prisma/client').Prisma.UserUpdateInput["passwordResetRedeemedAt"];
};

type ResolvedProductCreateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.ProductCreateInput["name"];
  description?: import('.prisma/client').Prisma.ProductCreateInput["description"];
  photo?: import('.prisma/client').Prisma.ProductCreateInput["photo"];
  status?: import('.prisma/client').Prisma.ProductCreateInput["status"];
  condition?: import('.prisma/client').Prisma.ProductCreateInput["condition"];
  price?: import('.prisma/client').Prisma.ProductCreateInput["price"];
  email?: import('.prisma/client').Prisma.ProductCreateInput["email"];
  user?: import('.prisma/client').Prisma.ProductCreateInput["user"];
};

type ResolvedProductUpdateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.ProductUpdateInput["name"];
  description?: import('.prisma/client').Prisma.ProductUpdateInput["description"];
  photo?: import('.prisma/client').Prisma.ProductUpdateInput["photo"];
  status?: import('.prisma/client').Prisma.ProductUpdateInput["status"];
  condition?: import('.prisma/client').Prisma.ProductUpdateInput["condition"];
  price?: import('.prisma/client').Prisma.ProductUpdateInput["price"];
  email?: import('.prisma/client').Prisma.ProductUpdateInput["email"];
  user?: import('.prisma/client').Prisma.ProductUpdateInput["user"];
};

type ResolvedProductImageCreateInput = {
  id?: undefined;
  image?: import('.prisma/client').Prisma.ProductImageCreateInput["image"];
  altText?: import('.prisma/client').Prisma.ProductImageCreateInput["altText"];
  product?: import('.prisma/client').Prisma.ProductImageCreateInput["product"];
};

type ResolvedProductImageUpdateInput = {
  id?: undefined;
  image?: import('.prisma/client').Prisma.ProductImageUpdateInput["image"];
  altText?: import('.prisma/client').Prisma.ProductImageUpdateInput["altText"];
  product?: import('.prisma/client').Prisma.ProductImageUpdateInput["product"];
};

type ResolvedCartItemCreateInput = {
  id?: undefined;
  quantity?: import('.prisma/client').Prisma.CartItemCreateInput["quantity"];
  product?: import('.prisma/client').Prisma.CartItemCreateInput["product"];
  user?: import('.prisma/client').Prisma.CartItemCreateInput["user"];
};

type ResolvedCartItemUpdateInput = {
  id?: undefined;
  quantity?: import('.prisma/client').Prisma.CartItemUpdateInput["quantity"];
  product?: import('.prisma/client').Prisma.CartItemUpdateInput["product"];
  user?: import('.prisma/client').Prisma.CartItemUpdateInput["user"];
};

type ResolvedOrderItemCreateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.OrderItemCreateInput["name"];
  description?: import('.prisma/client').Prisma.OrderItemCreateInput["description"];
  photo?: import('.prisma/client').Prisma.OrderItemCreateInput["photo"];
  price?: import('.prisma/client').Prisma.OrderItemCreateInput["price"];
  quantity?: import('.prisma/client').Prisma.OrderItemCreateInput["quantity"];
  order?: import('.prisma/client').Prisma.OrderItemCreateInput["order"];
  chat?: import('.prisma/client').Prisma.OrderItemCreateInput["chat"];
  status?: import('.prisma/client').Prisma.OrderItemCreateInput["status"];
  tracking?: import('.prisma/client').Prisma.OrderItemCreateInput["tracking"];
  trackingCompany?: import('.prisma/client').Prisma.OrderItemCreateInput["trackingCompany"];
  email?: import('.prisma/client').Prisma.OrderItemCreateInput["email"];
  user?: import('.prisma/client').Prisma.OrderItemCreateInput["user"];
  timeStamp?: import('.prisma/client').Prisma.OrderItemCreateInput["timeStamp"];
  date?: import('.prisma/client').Prisma.OrderItemCreateInput["date"];
};

type ResolvedOrderItemUpdateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.OrderItemUpdateInput["name"];
  description?: import('.prisma/client').Prisma.OrderItemUpdateInput["description"];
  photo?: import('.prisma/client').Prisma.OrderItemUpdateInput["photo"];
  price?: import('.prisma/client').Prisma.OrderItemUpdateInput["price"];
  quantity?: import('.prisma/client').Prisma.OrderItemUpdateInput["quantity"];
  order?: import('.prisma/client').Prisma.OrderItemUpdateInput["order"];
  chat?: import('.prisma/client').Prisma.OrderItemUpdateInput["chat"];
  status?: import('.prisma/client').Prisma.OrderItemUpdateInput["status"];
  tracking?: import('.prisma/client').Prisma.OrderItemUpdateInput["tracking"];
  trackingCompany?: import('.prisma/client').Prisma.OrderItemUpdateInput["trackingCompany"];
  email?: import('.prisma/client').Prisma.OrderItemUpdateInput["email"];
  user?: import('.prisma/client').Prisma.OrderItemUpdateInput["user"];
  timeStamp?: import('.prisma/client').Prisma.OrderItemUpdateInput["timeStamp"];
  date?: import('.prisma/client').Prisma.OrderItemUpdateInput["date"];
};

type ResolvedOrderCreateInput = {
  id?: undefined;
  label?: undefined;
  total?: import('.prisma/client').Prisma.OrderCreateInput["total"];
  charge?: import('.prisma/client').Prisma.OrderCreateInput["charge"];
  items?: import('.prisma/client').Prisma.OrderCreateInput["items"];
  user?: import('.prisma/client').Prisma.OrderCreateInput["user"];
  timeStamp?: import('.prisma/client').Prisma.OrderCreateInput["timeStamp"];
  date?: import('.prisma/client').Prisma.OrderCreateInput["date"];
};

type ResolvedOrderUpdateInput = {
  id?: undefined;
  label?: undefined;
  total?: import('.prisma/client').Prisma.OrderUpdateInput["total"];
  charge?: import('.prisma/client').Prisma.OrderUpdateInput["charge"];
  items?: import('.prisma/client').Prisma.OrderUpdateInput["items"];
  user?: import('.prisma/client').Prisma.OrderUpdateInput["user"];
  timeStamp?: import('.prisma/client').Prisma.OrderUpdateInput["timeStamp"];
  date?: import('.prisma/client').Prisma.OrderUpdateInput["date"];
};

type ResolvedRoleCreateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.RoleCreateInput["name"];
  canManageProducts?: import('.prisma/client').Prisma.RoleCreateInput["canManageProducts"];
  canSeeOtherUsers?: import('.prisma/client').Prisma.RoleCreateInput["canSeeOtherUsers"];
  canManageUsers?: import('.prisma/client').Prisma.RoleCreateInput["canManageUsers"];
  canManageRoles?: import('.prisma/client').Prisma.RoleCreateInput["canManageRoles"];
  canManageCart?: import('.prisma/client').Prisma.RoleCreateInput["canManageCart"];
  canManageOrders?: import('.prisma/client').Prisma.RoleCreateInput["canManageOrders"];
  assignedTo?: import('.prisma/client').Prisma.RoleCreateInput["assignedTo"];
};

type ResolvedRoleUpdateInput = {
  id?: undefined;
  name?: import('.prisma/client').Prisma.RoleUpdateInput["name"];
  canManageProducts?: import('.prisma/client').Prisma.RoleUpdateInput["canManageProducts"];
  canSeeOtherUsers?: import('.prisma/client').Prisma.RoleUpdateInput["canSeeOtherUsers"];
  canManageUsers?: import('.prisma/client').Prisma.RoleUpdateInput["canManageUsers"];
  canManageRoles?: import('.prisma/client').Prisma.RoleUpdateInput["canManageRoles"];
  canManageCart?: import('.prisma/client').Prisma.RoleUpdateInput["canManageCart"];
  canManageOrders?: import('.prisma/client').Prisma.RoleUpdateInput["canManageOrders"];
  assignedTo?: import('.prisma/client').Prisma.RoleUpdateInput["assignedTo"];
};

type ResolvedChatCreateInput = {
  id?: undefined;
  userFrom?: import('.prisma/client').Prisma.ChatCreateInput["userFrom"];
  item?: import('.prisma/client').Prisma.ChatCreateInput["item"];
  timeStamp?: import('.prisma/client').Prisma.ChatCreateInput["timeStamp"];
  message?: import('.prisma/client').Prisma.ChatCreateInput["message"];
};

type ResolvedChatUpdateInput = {
  id?: undefined;
  userFrom?: import('.prisma/client').Prisma.ChatUpdateInput["userFrom"];
  item?: import('.prisma/client').Prisma.ChatUpdateInput["item"];
  timeStamp?: import('.prisma/client').Prisma.ChatUpdateInput["timeStamp"];
  message?: import('.prisma/client').Prisma.ChatUpdateInput["message"];
};

export declare namespace Lists {
  export type User = import('@keystone-6/core').ListConfig<Lists.User.TypeInfo, any>;
  namespace User {
    export type Item = import('.prisma/client').User;
    export type TypeInfo = {
      key: "User";
      isSingleton: false;
      fields: "id" | "name" | "email" | "password" | "stripeId" | "confirmed" | "address" | "address2" | "town" | "county" | "postcode" | "cart" | "orders" | "role" | "products" | "passwordResetToken" | "passwordResetIssuedAt" | "passwordResetRedeemedAt"
      item: Item;
      inputs: {
        where: UserWhereInput;
        uniqueWhere: UserWhereUniqueInput;
        create: UserCreateInput;
        update: UserUpdateInput;
        orderBy: UserOrderByInput;
      };
      prisma: {
        create: ResolvedUserCreateInput
        update: ResolvedUserUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type Product = import('@keystone-6/core').ListConfig<Lists.Product.TypeInfo, any>;
  namespace Product {
    export type Item = import('.prisma/client').Product;
    export type TypeInfo = {
      key: "Product";
      isSingleton: false;
      fields: "id" | "name" | "description" | "photo" | "status" | "condition" | "price" | "email" | "user"
      item: Item;
      inputs: {
        where: ProductWhereInput;
        uniqueWhere: ProductWhereUniqueInput;
        create: ProductCreateInput;
        update: ProductUpdateInput;
        orderBy: ProductOrderByInput;
      };
      prisma: {
        create: ResolvedProductCreateInput
        update: ResolvedProductUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type ProductImage = import('@keystone-6/core').ListConfig<Lists.ProductImage.TypeInfo, any>;
  namespace ProductImage {
    export type Item = import('.prisma/client').ProductImage;
    export type TypeInfo = {
      key: "ProductImage";
      isSingleton: false;
      fields: "id" | "image" | "altText" | "product"
      item: Item;
      inputs: {
        where: ProductImageWhereInput;
        uniqueWhere: ProductImageWhereUniqueInput;
        create: ProductImageCreateInput;
        update: ProductImageUpdateInput;
        orderBy: ProductImageOrderByInput;
      };
      prisma: {
        create: ResolvedProductImageCreateInput
        update: ResolvedProductImageUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type CartItem = import('@keystone-6/core').ListConfig<Lists.CartItem.TypeInfo, any>;
  namespace CartItem {
    export type Item = import('.prisma/client').CartItem;
    export type TypeInfo = {
      key: "CartItem";
      isSingleton: false;
      fields: "id" | "quantity" | "product" | "user"
      item: Item;
      inputs: {
        where: CartItemWhereInput;
        uniqueWhere: CartItemWhereUniqueInput;
        create: CartItemCreateInput;
        update: CartItemUpdateInput;
        orderBy: CartItemOrderByInput;
      };
      prisma: {
        create: ResolvedCartItemCreateInput
        update: ResolvedCartItemUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type OrderItem = import('@keystone-6/core').ListConfig<Lists.OrderItem.TypeInfo, any>;
  namespace OrderItem {
    export type Item = import('.prisma/client').OrderItem;
    export type TypeInfo = {
      key: "OrderItem";
      isSingleton: false;
      fields: "id" | "name" | "description" | "photo" | "price" | "quantity" | "order" | "chat" | "status" | "tracking" | "trackingCompany" | "email" | "user" | "timeStamp" | "date"
      item: Item;
      inputs: {
        where: OrderItemWhereInput;
        uniqueWhere: OrderItemWhereUniqueInput;
        create: OrderItemCreateInput;
        update: OrderItemUpdateInput;
        orderBy: OrderItemOrderByInput;
      };
      prisma: {
        create: ResolvedOrderItemCreateInput
        update: ResolvedOrderItemUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type Order = import('@keystone-6/core').ListConfig<Lists.Order.TypeInfo, any>;
  namespace Order {
    export type Item = import('.prisma/client').Order;
    export type TypeInfo = {
      key: "Order";
      isSingleton: false;
      fields: "id" | "label" | "total" | "charge" | "items" | "user" | "timeStamp" | "date"
      item: Item;
      inputs: {
        where: OrderWhereInput;
        uniqueWhere: OrderWhereUniqueInput;
        create: OrderCreateInput;
        update: OrderUpdateInput;
        orderBy: OrderOrderByInput;
      };
      prisma: {
        create: ResolvedOrderCreateInput
        update: ResolvedOrderUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type Role = import('@keystone-6/core').ListConfig<Lists.Role.TypeInfo, any>;
  namespace Role {
    export type Item = import('.prisma/client').Role;
    export type TypeInfo = {
      key: "Role";
      isSingleton: false;
      fields: "id" | "name" | "canManageProducts" | "canSeeOtherUsers" | "canManageUsers" | "canManageRoles" | "canManageCart" | "canManageOrders" | "assignedTo"
      item: Item;
      inputs: {
        where: RoleWhereInput;
        uniqueWhere: RoleWhereUniqueInput;
        create: RoleCreateInput;
        update: RoleUpdateInput;
        orderBy: RoleOrderByInput;
      };
      prisma: {
        create: ResolvedRoleCreateInput
        update: ResolvedRoleUpdateInput
      };
      all: __TypeInfo;
    };
  }
  export type Chat = import('@keystone-6/core').ListConfig<Lists.Chat.TypeInfo, any>;
  namespace Chat {
    export type Item = import('.prisma/client').Chat;
    export type TypeInfo = {
      key: "Chat";
      isSingleton: false;
      fields: "id" | "userFrom" | "item" | "timeStamp" | "message"
      item: Item;
      inputs: {
        where: ChatWhereInput;
        uniqueWhere: ChatWhereUniqueInput;
        create: ChatCreateInput;
        update: ChatUpdateInput;
        orderBy: ChatOrderByInput;
      };
      prisma: {
        create: ResolvedChatCreateInput
        update: ResolvedChatUpdateInput
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
    readonly User: Lists.User.TypeInfo;
    readonly Product: Lists.Product.TypeInfo;
    readonly ProductImage: Lists.ProductImage.TypeInfo;
    readonly CartItem: Lists.CartItem.TypeInfo;
    readonly OrderItem: Lists.OrderItem.TypeInfo;
    readonly Order: Lists.Order.TypeInfo;
    readonly Role: Lists.Role.TypeInfo;
    readonly Chat: Lists.Chat.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;

export {}
