
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('./runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.3.1
 * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
 */
Prisma.prismaVersion = {
  client: "4.3.1",
  engine: "c875e43600dfe042452e0b868f7a48b817b9640b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CartItemScalarFieldEnum = makeEnum({
  id: 'id',
  quantity: 'quantity',
  productId: 'productId',
  userId: 'userId'
});

exports.Prisma.ChatScalarFieldEnum = makeEnum({
  id: 'id',
  userFromId: 'userFromId',
  itemId: 'itemId',
  timeStamp: 'timeStamp',
  message: 'message'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  photo: 'photo',
  price: 'price',
  quantity: 'quantity',
  orderId: 'orderId',
  status: 'status',
  tracking: 'tracking',
  trackingCompany: 'trackingCompany',
  email: 'email',
  userId: 'userId',
  timeStamp: 'timeStamp',
  date: 'date'
});

exports.Prisma.OrderScalarFieldEnum = makeEnum({
  id: 'id',
  total: 'total',
  charge: 'charge',
  userId: 'userId',
  timeStamp: 'timeStamp',
  date: 'date'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  photo: 'photo',
  status: 'status',
  condition: 'condition',
  price: 'price',
  email: 'email',
  userId: 'userId'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  canManageProducts: 'canManageProducts',
  canSeeOtherUsers: 'canSeeOtherUsers',
  canManageUsers: 'canManageUsers',
  canManageRoles: 'canManageRoles',
  canManageCart: 'canManageCart',
  canManageOrders: 'canManageOrders'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  stripeId: 'stripeId',
  confirmed: 'confirmed',
  address: 'address',
  address2: 'address2',
  town: 'town',
  county: 'county',
  postcode: 'postcode',
  roleId: 'roleId',
  passwordResetToken: 'passwordResetToken',
  passwordResetIssuedAt: 'passwordResetIssuedAt',
  passwordResetRedeemedAt: 'passwordResetRedeemedAt'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Product: 'Product',
  CartItem: 'CartItem',
  OrderItem: 'OrderItem',
  Order: 'Order',
  Role: 'Role',
  Chat: 'Chat'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
