"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var CLI_exports = {};
__export(CLI_exports, {
  CLI: () => CLI
});
module.exports = __toCommonJS(CLI_exports);
var import_chalk = __toESM(require("chalk"));
var import_src = require("../../internals/src");
const _CLI = class {
  constructor(cmds) {
    this.cmds = cmds;
  }
  static new(cmds) {
    return new _CLI(cmds);
  }
  async parse(argv) {
    const args = (0, import_src.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--json": Boolean,
      "--experimental": Boolean,
      "--preview-feature": Boolean,
      "--early-access-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_src.isError)(args)) {
      return this.help(args.message);
    }
    if (args._.length === 0 || args["--help"]) {
      return this.help();
    }
    const cmdName = args._[0];
    const cmd = this.cmds[cmdName];
    if (cmd) {
      let argsForCmd;
      if (args["--experimental"]) {
        argsForCmd = [...args._.slice(1), `--experimental=${args["--experimental"]}`];
      } else if (args["--preview-feature"]) {
        argsForCmd = [...args._.slice(1), `--preview-feature=${args["--preview-feature"]}`];
      } else if (args["--early-access-feature"]) {
        argsForCmd = [...args._.slice(1), `--early-access-feature=${args["--early-access-feature"]}`];
      } else {
        argsForCmd = args._.slice(1);
      }
      return cmd.parse(argsForCmd);
    }
    return (0, import_src.unknownCommand)(this.help(), args._[0]);
  }
  help(error) {
    if (error) {
      return new import_src.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_CLI.help}`);
    }
    return _CLI.help;
  }
};
let CLI = _CLI;
__name(CLI, "CLI");
CLI.help = (0, import_src.format)(`This is the internal CLI for @prisma/migrate`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CLI
});
