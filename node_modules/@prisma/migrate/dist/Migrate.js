"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Migrate_exports = {};
__export(Migrate_exports, {
  Migrate: () => Migrate
});
module.exports = __toCommonJS(Migrate_exports);
var import_debug = __toESM(require("@prisma/debug"));
var import_engines_version = require("@prisma/engines-version");
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_fs = __toESM(require("fs"));
var import_log_update = __toESM(require("log-update"));
var import_path = __toESM(require("path"));
var import_MigrateEngine = require("./MigrateEngine");
var import_errors = require("./utils/errors");
const debug = (0, import_debug.default)("prisma:migrate");
const packageJson = eval(`require('../package.json')`);
class Migrate {
  constructor(schemaPath, enabledPreviewFeatures) {
    if (schemaPath) {
      this.schemaPath = this.getSchemaPath(schemaPath);
      this.migrationsDirectoryPath = import_path.default.join(import_path.default.dirname(this.schemaPath), "migrations");
      this.engine = new import_MigrateEngine.MigrateEngine({
        projectDir: import_path.default.dirname(this.schemaPath),
        schemaPath: this.schemaPath,
        enabledPreviewFeatures
      });
    } else {
      this.engine = new import_MigrateEngine.MigrateEngine({
        projectDir: process.cwd(),
        enabledPreviewFeatures
      });
    }
  }
  stop() {
    this.engine.stop();
  }
  getSchemaPath(schemaPathFromOptions) {
    const schemaPath = (0, import_internals.getSchemaPathSync)(schemaPathFromOptions);
    if (!schemaPath) {
      throw new import_errors.NoSchemaFoundError();
    }
    return schemaPath;
  }
  getPrismaSchema() {
    if (!this.schemaPath)
      throw new Error("this.schemaPath is undefined");
    return import_fs.default.readFileSync(this.schemaPath, "utf-8");
  }
  reset() {
    return this.engine.reset();
  }
  createMigration(params) {
    return this.engine.createMigration(params);
  }
  diagnoseMigrationHistory({
    optInToShadowDatabase
  }) {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.diagnoseMigrationHistory({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      optInToShadowDatabase
    });
  }
  listMigrationDirectories() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.listMigrationDirectories({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  devDiagnostic() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.devDiagnostic({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  async markMigrationApplied({ migrationId }) {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return await this.engine.markMigrationApplied({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      migrationName: migrationId
    });
  }
  markMigrationRolledBack({ migrationId }) {
    return this.engine.markMigrationRolledBack({
      migrationName: migrationId
    });
  }
  applyMigrations() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    return this.engine.applyMigrations({
      migrationsDirectoryPath: this.migrationsDirectoryPath
    });
  }
  evaluateDataLoss() {
    if (!this.migrationsDirectoryPath)
      throw new Error("this.migrationsDirectoryPath is undefined");
    const schema = this.getPrismaSchema();
    return this.engine.evaluateDataLoss({
      migrationsDirectoryPath: this.migrationsDirectoryPath,
      prismaSchema: schema
    });
  }
  async push({ force = false }) {
    const schema = this.getPrismaSchema();
    const { warnings, unexecutable, executedSteps } = await this.engine.schemaPush({
      force,
      schema
    });
    return {
      executedSteps,
      warnings,
      unexecutable
    };
  }
  async tryToRunGenerate() {
    if (!this.schemaPath)
      throw new Error("this.schemaPath is undefined");
    const message = [];
    console.info();
    (0, import_log_update.default)(`Running generate... ${import_chalk.default.dim("(Use --skip-generate to skip the generators)")}`);
    const generators = await (0, import_internals.getGenerators)({
      schemaPath: this.schemaPath,
      printDownloadProgress: true,
      version: import_engines_version.enginesVersion,
      cliVersion: packageJson.version,
      dataProxy: false
    });
    for (const generator of generators) {
      (0, import_log_update.default)(`Running generate... - ${generator.getPrettyName()}`);
      const before = Date.now();
      try {
        await generator.generate();
        const after = Date.now();
        message.push((0, import_internals.getGeneratorSuccessMessage)(generator, after - before));
        generator.stop();
      } catch (e) {
        message.push(`${e.message}`);
        generator.stop();
      }
    }
    (0, import_log_update.default)(message.join("\n"));
  }
}
__name(Migrate, "Migrate");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Migrate
});
