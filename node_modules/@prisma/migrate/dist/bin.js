#!/usr/bin/env ts-node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import_debug = __toESM(require("@prisma/debug"));
var import_engines_version = require("@prisma/engines-version");
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_CLI = require("./CLI");
var import_DbCommand = require("./commands/DbCommand");
var import_DbExecute = require("./commands/DbExecute");
var import_DbPull = require("./commands/DbPull");
var import_DbPush = require("./commands/DbPush");
var import_DbSeed = require("./commands/DbSeed");
var import_MigrateCommand = require("./commands/MigrateCommand");
var import_MigrateDeploy = require("./commands/MigrateDeploy");
var import_MigrateDev = require("./commands/MigrateDev");
var import_MigrateDiff = require("./commands/MigrateDiff");
var import_MigrateReset = require("./commands/MigrateReset");
var import_MigrateResolve = require("./commands/MigrateResolve");
var import_MigrateStatus = require("./commands/MigrateStatus");
process.on("uncaughtException", (e) => {
  console.log(e);
});
process.on("unhandledRejection", (e, promise) => {
  console.log(String(e), String(promise));
});
process.once("SIGINT", () => {
  process.exit(130);
});
const commandArray = process.argv.slice(2);
const packageJson = eval(`require('../package.json')`);
async function main() {
  const cli = import_CLI.CLI.new({
    migrate: import_MigrateCommand.MigrateCommand.new({
      dev: import_MigrateDev.MigrateDev.new(),
      status: import_MigrateStatus.MigrateStatus.new(),
      resolve: import_MigrateResolve.MigrateResolve.new(),
      reset: import_MigrateReset.MigrateReset.new(),
      deploy: import_MigrateDeploy.MigrateDeploy.new(),
      diff: import_MigrateDiff.MigrateDiff.new()
    }),
    db: import_DbCommand.DbCommand.new({
      execute: import_DbExecute.DbExecute.new(),
      pull: import_DbPull.DbPull.new(),
      push: import_DbPush.DbPush.new(),
      seed: import_DbSeed.DbSeed.new()
    })
  });
  const result = await cli.parse(commandArray);
  if (result instanceof import_internals.HelpError) {
    console.error(result);
    return 1;
  } else if ((0, import_internals.isError)(result)) {
    console.error(result);
    return 1;
  }
  console.log(result);
  return 0;
}
__name(main, "main");
main().then((code) => {
  if (code !== 0) {
    process.exit(code);
  }
}).catch((error) => {
  if (error.rustStack) {
    (0, import_internals.handlePanic)(error, packageJson.version, import_engines_version.enginesVersion, commandArray.join(" ")).catch((e) => {
      if (import_debug.default.enabled("migrate")) {
        console.error(import_chalk.default.redBright.bold("Error: ") + e.stack);
      } else {
        console.error(import_chalk.default.redBright.bold("Error: ") + e.message);
      }
    }).finally(() => {
      process.exit(1);
    });
  } else {
    if (import_debug.default.enabled("migrate")) {
      console.error(import_chalk.default.redBright.bold("Error: ") + error.stack);
    } else {
      console.error(import_chalk.default.redBright.bold("Error: ") + error.message);
    }
    process.exit(1);
  }
});
