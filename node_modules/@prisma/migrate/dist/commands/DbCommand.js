"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DbCommand_exports = {};
__export(DbCommand_exports, {
  DbCommand: () => DbCommand
});
module.exports = __toCommonJS(DbCommand_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
const _DbCommand = class {
  constructor(cmds) {
    this.cmds = cmds;
  }
  static new(cmds) {
    return new _DbCommand(cmds);
  }
  async parse(argv) {
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    if (args._.length === 0 || args["--help"]) {
      return this.help();
    }
    const cmd = this.cmds[args._[0]];
    if (cmd) {
      const argsForCmd = args["--preview-feature"] ? [...args._.slice(1), `--preview-feature`] : args._.slice(1);
      return cmd.parse(argsForCmd);
    }
    return (0, import_internals.unknownCommand)(_DbCommand.help, args._[0]);
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbCommand.help}`);
    }
    return _DbCommand.help;
  }
};
let DbCommand = _DbCommand;
__name(DbCommand, "DbCommand");
DbCommand.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F3CB}\uFE0F  ")}Manage your database schema and lifecycle during development.

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db [command] [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${import_chalk.default.bold("Commands")}
     pull   Pull the state from the database to the Prisma schema using introspection
     push   Push the state from Prisma schema to the database during prototyping
     seed   Seed your database
  execute   Execute native commands to your database

${import_chalk.default.bold("Examples")}

  Run \`prisma db pull\`
  ${import_chalk.default.dim("$")} prisma db pull

  Run \`prisma db push\`
  ${import_chalk.default.dim("$")} prisma db push

  Run \`prisma db seed\`
  ${import_chalk.default.dim("$")} prisma db seed

  Run \`prisma db execute\`
  ${import_chalk.default.dim("$")} prisma db execute
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbCommand
});
