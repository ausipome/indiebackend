"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DbDrop_exports = {};
__export(DbDrop_exports, {
  DbDrop: () => DbDrop
});
module.exports = __toCommonJS(DbDrop_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_prompts = __toESM(require("prompts"));
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_errors = require("../utils/errors");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
const _DbDrop = class {
  static new() {
    return new _DbDrop();
  }
  async parse(argv) {
    var _a;
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--preview-feature": Boolean,
      "--force": Boolean,
      "-f": "--force",
      "--schema": String,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("db drop", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (!args["--preview-feature"]) {
      throw new import_flagErrors.PreviewFlagError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    const dbInfo = await (0, import_ensureDatabaseExists.getDbInfo)(schemaPath);
    if (!dbInfo.url) {
      throw new Error("Connection url is undefined.");
    }
    const schemaDir = await (0, import_internals.getSchemaDir)(schemaPath);
    console.info();
    if (!args["--force"]) {
      if ((0, import_internals.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
        throw new import_errors.DbNeedsForceError("drop");
      }
      const confirmation = await (0, import_prompts.default)({
        type: "text",
        name: "value",
        message: `Enter the ${dbInfo.dbType} ${dbInfo.schemaWord} name "${dbInfo.dbName}" to drop it.
Location: "${dbInfo.dbLocation}".
${import_chalk.default.red("All data will be lost")}.`
      });
      console.info();
      if (!confirmation.value) {
        console.info("Drop cancelled.");
        process.exit(130);
      } else if (confirmation.value !== dbInfo.dbName) {
        throw Error(`The ${dbInfo.schemaWord} name entered "${confirmation.value}" doesn't match "${dbInfo.dbName}".`);
      }
    }
    if (await (0, import_internals.dropDatabase)(dbInfo.url, schemaDir)) {
      return `${process.platform === "win32" ? "" : "\u{1F680}  "}The ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}" from "${dbInfo.dbLocation}" was successfully dropped.
`;
    } else {
      return "";
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbDrop.help}`);
    }
    return _DbDrop.help;
  }
};
let DbDrop = _DbDrop;
__name(DbDrop, "DbDrop");
DbDrop.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F4A3}  ")}Drop the database

${import_chalk.default.bold.yellow("WARNING")} ${import_chalk.default.bold(
  `Prisma db drop is currently in Preview (${(0, import_internals.link)("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`
)}
${import_chalk.default.dim("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db drop [options] --preview-feature

${import_chalk.default.bold("Options")}

   -h, --help   Display this help message
     --schema   Custom path to your Prisma schema
  -f, --force   Skip the confirmation prompt

${import_chalk.default.bold("Examples")}

  Drop the database
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature

  Specify a schema
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature --schema=./schema.prisma

  Use --force to skip the confirmation prompt
  ${import_chalk.default.dim("$")} prisma db drop --preview-feature --force
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbDrop
});
