"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DbPush_exports = {};
__export(DbPush_exports, {
  DbPush: () => DbPush
});
module.exports = __toCommonJS(DbPush_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_prompts = __toESM(require("prompts"));
var import_Migrate = require("../Migrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_errors = require("../utils/errors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
const _DbPush = class {
  static new() {
    return new _DbPush();
  }
  async parse(argv) {
    var _a, _b, _c;
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--preview-feature": Boolean,
        "--accept-data-loss": Boolean,
        "--force-reset": Boolean,
        "--skip-generate": Boolean,
        "--schema": String,
        "--telemetry-information": String,
        "--force": Boolean,
        "-f": "--force"
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("db push", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--preview-feature"]) {
      import_internals.logger.warn(`Prisma "db push" was in Preview and is now Generally Available.
You can now remove the ${import_chalk.default.red("--preview-feature")} flag.`);
    }
    if (args["--force"]) {
      throw new import_errors.DbPushForceFlagRenamedError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    const dbInfo = await (0, import_ensureDatabaseExists.getDbInfo)(schemaPath);
    const migrate = new import_Migrate.Migrate(schemaPath);
    try {
      const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("push", true, schemaPath);
      if (wasDbCreated) {
        console.info();
        console.info(wasDbCreated);
      }
    } catch (e) {
      console.info();
      throw e;
    }
    let wasDatabaseReset = false;
    if (args["--force-reset"]) {
      console.info();
      try {
        await migrate.reset();
      } catch (e) {
        migrate.stop();
        throw e;
      }
      if (dbInfo.dbName && dbInfo.dbLocation) {
        console.info(
          `The ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}" from "${dbInfo.dbLocation}" was successfully reset.`
        );
      } else {
        console.info(`The ${dbInfo.dbType} ${dbInfo.schemaWord} was successfully reset.`);
      }
      wasDatabaseReset = true;
    }
    const before = Date.now();
    let migration;
    try {
      migration = await migrate.push({
        force: args["--accept-data-loss"]
      });
    } catch (e) {
      migrate.stop();
      throw e;
    }
    if (migration.unexecutable && migration.unexecutable.length > 0) {
      const messages = [];
      messages.push(`${import_chalk.default.bold.red("\n\u26A0\uFE0F We found changes that cannot be executed:\n")}`);
      for (const item of migration.unexecutable) {
        messages.push(`${(0, import_chalk.default)(`  \u2022 ${item}`)}`);
      }
      console.info();
      if ((0, import_internals.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
        migrate.stop();
        throw new Error(`${messages.join("\n")}

Use the --force-reset flag to drop the database before push like ${import_chalk.default.bold.greenBright(
          (0, import_internals.getCommandWithExecutor)("prisma db push --force-reset")
        )}
${import_chalk.default.bold.redBright("All data will be lost.")}
        `);
      } else {
        console.info(`${messages.join("\n")}
`);
      }
      console.info();
      const confirmation = await (0, import_prompts.default)({
        type: "confirm",
        name: "value",
        message: `To apply this change we need to reset the database, do you want to continue? ${import_chalk.default.red(
          "All data will be lost"
        )}.`
      });
      if (!confirmation.value) {
        console.info("Reset cancelled.");
        migrate.stop();
        process.exit(130);
      }
      try {
        await migrate.reset();
        if (dbInfo.dbName && dbInfo.dbLocation) {
          console.info(
            `The ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}" from "${dbInfo.dbLocation}" was successfully reset.`
          );
        } else {
          console.info(`The ${dbInfo.dbType} ${dbInfo.schemaWord} was successfully reset.`);
        }
        wasDatabaseReset = true;
        await migrate.push({});
      } catch (e) {
        migrate.stop();
        throw e;
      }
    }
    if (migration.warnings && migration.warnings.length > 0) {
      console.info(import_chalk.default.bold.yellow(`
\u26A0\uFE0F  There might be data loss when applying the changes:
`));
      for (const warning of migration.warnings) {
        console.info((0, import_chalk.default)(`  \u2022 ${warning}`));
      }
      console.info();
      if (!args["--accept-data-loss"]) {
        if ((0, import_internals.isCi)() && Boolean((_b = import_prompts.default._injected) == null ? void 0 : _b.length) === false) {
          migrate.stop();
          throw new import_errors.DbPushIgnoreWarningsWithFlagError();
        }
        console.info();
        const confirmation = await (0, import_prompts.default)({
          type: "confirm",
          name: "value",
          message: `Do you want to ignore the warning(s)?`
        });
        if (!confirmation.value) {
          console.info("Push cancelled.");
          migrate.stop();
          process.exit(130);
        }
        try {
          await migrate.push({
            force: true
          });
        } catch (e) {
          migrate.stop();
          throw e;
        }
      }
    }
    migrate.stop();
    if (!wasDatabaseReset && migration.warnings.length === 0 && migration.executedSteps === 0) {
      console.info(`
The database is already in sync with the Prisma schema.`);
    } else {
      const migrationTimeMessage = `Done in ${(0, import_internals.formatms)(Date.now() - before)}`;
      const rocketEmoji = process.platform === "win32" ? "" : "\u{1F680}  ";
      const migrationSuccessStdMessage = "Your database is now in sync with your Prisma schema.";
      const migrationSuccessMongoMessage = "Your database indexes are now in sync with your Prisma schema.";
      const provider = (0, import_internals.protocolToConnectorType)(`${(_c = dbInfo.url) == null ? void 0 : _c.split(":")[0]}:`);
      console.info(
        `
${rocketEmoji}${provider === "mongodb" ? migrationSuccessMongoMessage : migrationSuccessStdMessage} ${migrationTimeMessage}`
      );
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
      await migrate.tryToRunGenerate();
    }
    return ``;
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbPush.help}`);
    }
    return _DbPush.help;
  }
};
let DbPush = _DbPush;
__name(DbPush, "DbPush");
DbPush.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F64C}  ")}Push the state from your Prisma schema to your database

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db push [options]

${import_chalk.default.bold("Options")}

           -h, --help   Display this help message
             --schema   Custom path to your Prisma schema
   --accept-data-loss   Ignore data loss warnings
        --force-reset   Force a reset of the database before push 
      --skip-generate   Skip triggering generators (e.g. Prisma Client)

${import_chalk.default.bold("Examples")}

  Push the Prisma schema state to the database
  ${import_chalk.default.dim("$")} prisma db push

  Specify a schema
  ${import_chalk.default.dim("$")} prisma db push --schema=./schema.prisma

  Ignore data loss warnings
  ${import_chalk.default.dim("$")} prisma db push --accept-data-loss
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbPush
});
