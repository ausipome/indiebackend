"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DbSeed_exports = {};
__export(DbSeed_exports, {
  DbSeed: () => DbSeed
});
module.exports = __toCommonJS(DbSeed_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_seed = require("../utils/seed");
const _DbSeed = class {
  static new() {
    return new _DbSeed();
  }
  async parse(argv) {
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--preview-feature": Boolean,
        "--schema": String,
        "--telemetry-information": String
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--preview-feature"]) {
      import_internals.logger.warn(`Prisma "db seed" was in Preview and is now Generally Available.
You can now remove the ${import_chalk.default.red("--preview-feature")} flag.`);
      await (0, import_seed.legacyTsNodeScriptWarning)();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    if (args["--schema"]) {
      import_internals.logger.warn(
        import_chalk.default.yellow(
          `The "--schema" parameter is not used anymore by "prisma db seed" since version 3.0 and can now be removed.`
        )
      );
    }
    const seedCommandFromPkgJson = await (0, import_seed.getSeedCommandFromPackageJson)(process.cwd());
    if (!seedCommandFromPkgJson) {
      const schemaPath = await (0, import_internals.getSchemaPath)(args["--schema"]);
      const message = await (0, import_seed.verifySeedConfigAndReturnMessage)(schemaPath);
      if (message) {
        throw new Error(message);
      }
      return ``;
    }
    const successfulSeeding = await (0, import_seed.executeSeedCommand)(seedCommandFromPkgJson);
    if (successfulSeeding) {
      return `
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.`;
    } else {
      process.exit(1);
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_DbSeed.help}`);
    }
    return _DbSeed.help;
  }
};
let DbSeed = _DbSeed;
__name(DbSeed, "DbSeed");
DbSeed.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F64C}  ")}Seed your database

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma db seed [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbSeed
});
