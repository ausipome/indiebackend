"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MigrateDeploy_exports = {};
__export(MigrateDeploy_exports, {
  MigrateDeploy: () => MigrateDeploy
});
module.exports = __toCommonJS(MigrateDeploy_exports);
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_Migrate = require("../Migrate");
var import_detectOldMigrate = require("../utils/detectOldMigrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
var import_printFiles = require("../utils/printFiles");
const debug = (0, import_debug.default)("prisma:migrate:deploy");
const _MigrateDeploy = class {
  static new() {
    return new _MigrateDeploy();
  }
  async parse(argv) {
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--experimental": Boolean,
        "--early-access-feature": Boolean,
        "--schema": String,
        "--telemetry-information": String
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("migrate deploy", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithMigrateError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const migrate = new import_Migrate.Migrate(schemaPath);
    try {
      const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("apply", true, schemaPath);
      if (wasDbCreated) {
        console.info();
        console.info(wasDbCreated);
      }
    } catch (e) {
      console.info();
      throw e;
    }
    const listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
    debug({ listMigrationDirectoriesResult });
    console.info();
    if (listMigrationDirectoriesResult.migrations.length > 0) {
      const migrations = listMigrationDirectoriesResult.migrations;
      console.info(`${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations`);
    } else {
      console.info(`No migration found in prisma/migrations`);
    }
    let migrationIds;
    try {
      console.info();
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      migrate.stop();
    }
    console.info();
    if (migrationIds.length === 0) {
      return import_chalk.default.greenBright(`No pending migrations to apply.`);
    } else {
      return `The following migration${migrationIds.length > 1 ? "s" : ""} have been applied:

${(0, import_chalk.default)(
        (0, import_printFiles.printFilesFromMigrationIds)("migrations", migrationIds, {
          "migration.sql": ""
        })
      )}
      
${import_chalk.default.greenBright("All migrations have been successfully applied.")}`;
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateDeploy.help}`);
    }
    return _MigrateDeploy.help;
  }
};
let MigrateDeploy = _MigrateDeploy;
__name(MigrateDeploy, "MigrateDeploy");
MigrateDeploy.help = (0, import_internals.format)(`
Apply pending migrations to update the database schema in production/staging

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate deploy [options]

${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

${import_chalk.default.bold("Examples")}

  Deploy your pending migrations to your production/staging database
  ${import_chalk.default.dim("$")} prisma migrate deploy

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate deploy --schema=./schema.prisma

`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateDeploy
});
