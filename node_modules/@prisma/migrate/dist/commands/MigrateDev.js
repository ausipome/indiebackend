"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MigrateDev_exports = {};
__export(MigrateDev_exports, {
  MigrateDev: () => MigrateDev
});
module.exports = __toCommonJS(MigrateDev_exports);
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_fs = __toESM(require("fs"));
var import_prompts = __toESM(require("prompts"));
var import_Migrate = require("../Migrate");
var import_detectOldMigrate = require("../utils/detectOldMigrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_errors = require("../utils/errors");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_handleEvaluateDataloss = require("../utils/handleEvaluateDataloss");
var import_printDatasource = require("../utils/printDatasource");
var import_printFiles = require("../utils/printFiles");
var import_printMigrationId = require("../utils/printMigrationId");
var import_promptForMigrationName = require("../utils/promptForMigrationName");
var import_seed = require("../utils/seed");
const debug = (0, import_debug.default)("prisma:migrate:dev");
const _MigrateDev = class {
  static new() {
    return new _MigrateDev();
  }
  async parse(argv) {
    var _a, _b;
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--name": String,
      "-n": "--name",
      "--create-only": Boolean,
      "--schema": String,
      "--skip-generate": Boolean,
      "--skip-seed": Boolean,
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("migrate dev", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithMigrateError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    console.info();
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const schema = import_fs.default.readFileSync(schemaPath, "utf-8");
    await (0, import_internals.getDMMF)({
      datamodel: schema
    });
    await (0, import_internals.getConfig)({
      datamodel: schema
    });
    const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("create", true, schemaPath);
    if (wasDbCreated) {
      console.info(wasDbCreated);
      console.info();
    }
    const migrate = new import_Migrate.Migrate(schemaPath);
    let devDiagnostic;
    try {
      devDiagnostic = await migrate.devDiagnostic();
      debug({ devDiagnostic: JSON.stringify(devDiagnostic, null, 2) });
    } catch (e) {
      migrate.stop();
      throw e;
    }
    const migrationIdsApplied = [];
    if (devDiagnostic.action.tag === "reset") {
      if (!args["--force"]) {
        if ((0, import_internals.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
          migrate.stop();
          throw new import_errors.MigrateDevEnvNonInteractiveError();
        }
        const dbInfo = await (0, import_ensureDatabaseExists.getDbInfo)(schemaPath);
        const confirmedReset = await this.confirmReset(dbInfo, devDiagnostic.action.reason);
        console.info();
        if (!confirmedReset) {
          console.info("Reset cancelled.");
          migrate.stop();
          process.exit(130);
        }
      }
      try {
        await migrate.reset();
      } catch (e) {
        migrate.stop();
        throw e;
      }
    }
    try {
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIdsApplied.push(...appliedMigrationNames);
      if (appliedMigrationNames.length > 0) {
        console.info();
        console.info(
          `The following migration(s) have been applied:

${(0, import_chalk.default)(
            (0, import_printFiles.printFilesFromMigrationIds)("migrations", appliedMigrationNames, {
              "migration.sql": ""
            })
          )}`
        );
      }
    } catch (e) {
      migrate.stop();
      throw e;
    }
    let evaluateDataLossResult;
    try {
      evaluateDataLossResult = await migrate.evaluateDataLoss();
      debug({ evaluateDataLossResult });
    } catch (e) {
      migrate.stop();
      throw e;
    }
    const unexecutableStepsError = (0, import_handleEvaluateDataloss.handleUnexecutableSteps)(
      evaluateDataLossResult.unexecutableSteps,
      args["--create-only"]
    );
    if (unexecutableStepsError) {
      migrate.stop();
      throw new Error(unexecutableStepsError);
    }
    if (evaluateDataLossResult.warnings && evaluateDataLossResult.warnings.length > 0) {
      console.log(import_chalk.default.bold(`
\u26A0\uFE0F  Warnings for the current datasource:
`));
      for (const warning of evaluateDataLossResult.warnings) {
        console.log((0, import_chalk.default)(`  \u2022 ${warning.message}`));
      }
      console.info();
      if (!args["--force"]) {
        if ((0, import_internals.isCi)() && Boolean((_b = import_prompts.default._injected) == null ? void 0 : _b.length) === false) {
          migrate.stop();
          throw new import_errors.MigrateDevEnvNonInteractiveError();
        }
        const message = args["--create-only"] ? "Are you sure you want create this migration?" : "Are you sure you want create and apply this migration?";
        const confirmation = await (0, import_prompts.default)({
          type: "confirm",
          name: "value",
          message
        });
        if (!confirmation.value) {
          console.info("Migration cancelled.");
          migrate.stop();
          process.exit(130);
        }
      }
    }
    let migrationName = void 0;
    if (evaluateDataLossResult.migrationSteps > 0 || args["--create-only"]) {
      const getMigrationNameResult = await (0, import_promptForMigrationName.getMigrationName)(args["--name"]);
      if (getMigrationNameResult.userCancelled) {
        console.log(getMigrationNameResult.userCancelled);
        migrate.stop();
        process.exit(130);
      } else {
        migrationName = getMigrationNameResult.name;
      }
    }
    let migrationIds;
    try {
      const createMigrationResult = await migrate.createMigration({
        migrationsDirectoryPath: migrate.migrationsDirectoryPath,
        migrationName: migrationName || "",
        draft: args["--create-only"] ? true : false,
        prismaSchema: migrate.getPrismaSchema()
      });
      debug({ createMigrationResult });
      if (args["--create-only"]) {
        migrate.stop();
        return `Prisma Migrate created the following migration without applying it ${(0, import_printMigrationId.printMigrationId)(
          createMigrationResult.generatedMigrationName
        )}

You can now edit it and apply it by running ${import_chalk.default.greenBright(
          (0, import_internals.getCommandWithExecutor)("prisma migrate dev")
        )}.`;
      }
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      migrate.stop();
    }
    migrationIdsApplied.length > 0 && console.info();
    if (migrationIds.length === 0) {
      if (migrationIdsApplied.length > 0) {
        console.info(`${import_chalk.default.green("Your database is now in sync with your schema.")}`);
      } else {
        console.info(`Already in sync, no schema change or pending migration was found.`);
      }
    } else {
      console.info();
      console.info(
        `The following migration(s) have been created and applied from new schema changes:

${(0, import_chalk.default)(
          (0, import_printFiles.printFilesFromMigrationIds)("migrations", migrationIds, {
            "migration.sql": ""
          })
        )}

${import_chalk.default.green("Your database is now in sync with your schema.")}`
      );
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
      await migrate.tryToRunGenerate();
      console.info();
    }
    if ((wasDbCreated || devDiagnostic.action.tag === "reset") && !process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
      try {
        const seedCommandFromPkgJson = await (0, import_seed.getSeedCommandFromPackageJson)(process.cwd());
        if (seedCommandFromPkgJson) {
          console.info();
          const successfulSeeding = await (0, import_seed.executeSeedCommand)(seedCommandFromPkgJson);
          if (successfulSeeding) {
            console.info(`
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.
`);
          } else {
            process.exit(1);
          }
        } else {
          const schemaPath2 = await (0, import_internals.getSchemaPath)(args["--schema"]);
          await (0, import_seed.verifySeedConfigAndReturnMessage)(schemaPath2);
        }
      } catch (e) {
        console.error(e);
      }
    }
    return "";
  }
  async confirmReset({
    schemaWord,
    dbType,
    dbName,
    dbLocation
  }, reason) {
    const mssqlMessage = `We need to reset the database.
Do you want to continue? ${import_chalk.default.red("All data will be lost")}.`;
    const message = `We need to reset the ${dbType} ${schemaWord} "${dbName}" at "${dbLocation}".
Do you want to continue? ${import_chalk.default.red("All data will be lost")}.`;
    console.info(reason);
    const confirmation = await (0, import_prompts.default)({
      type: "confirm",
      name: "value",
      message: dbType === "SQL Server" ? mssqlMessage : message
    });
    return confirmation.value;
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateDev.help}`);
    }
    return _MigrateDev.help;
  }
};
let MigrateDev = _MigrateDev;
__name(MigrateDev, "MigrateDev");
MigrateDev.help = (0, import_internals.format)(`
${process.platform === "win32" ? "" : import_chalk.default.bold("\u{1F3CB}\uFE0F  ")}Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
 
${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate dev [options]

${import_chalk.default.bold("Options")}

       -h, --help   Display this help message
         --schema   Custom path to your Prisma schema
       -n, --name   Name the migration
    --create-only   Create a new migration but do not apply it
                    The migration will be empty if there are no changes in Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed

${import_chalk.default.bold("Examples")}

  Create a migration from changes in Prisma schema, apply it to the database, trigger generators (e.g. Prisma Client)
  ${import_chalk.default.dim("$")} prisma migrate dev

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate dev --schema=./schema.prisma

  Create a migration without applying it
  ${import_chalk.default.dim("$")} prisma migrate dev --create-only
  `);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateDev
});
