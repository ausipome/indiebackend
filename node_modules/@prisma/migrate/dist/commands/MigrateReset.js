"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MigrateReset_exports = {};
__export(MigrateReset_exports, {
  MigrateReset: () => MigrateReset
});
module.exports = __toCommonJS(MigrateReset_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_prompts = __toESM(require("prompts"));
var import_Migrate = require("../Migrate");
var import_detectOldMigrate = require("../utils/detectOldMigrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_errors = require("../utils/errors");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
var import_printFiles = require("../utils/printFiles");
var import_seed = require("../utils/seed");
const _MigrateReset = class {
  static new() {
    return new _MigrateReset();
  }
  async parse(argv) {
    var _a;
    const args = (0, import_internals.arg)(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--force": Boolean,
      "-f": "--force",
      "--skip-generate": Boolean,
      "--skip-seed": Boolean,
      "--experimental": Boolean,
      "--early-access-feature": Boolean,
      "--schema": String,
      "--telemetry-information": String
    });
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("migrate reset", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithMigrateError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const wasDbCreated = await (0, import_ensureDatabaseExists.ensureDatabaseExists)("create", true, schemaPath);
    if (wasDbCreated) {
      console.info();
      console.info(wasDbCreated);
    }
    console.info();
    if (!args["--force"]) {
      if ((0, import_internals.isCi)() && Boolean((_a = import_prompts.default._injected) == null ? void 0 : _a.length) === false) {
        throw new import_errors.MigrateResetEnvNonInteractiveError();
      }
      const confirmation = await (0, import_prompts.default)({
        type: "confirm",
        name: "value",
        message: `Are you sure you want to reset your database? ${import_chalk.default.red("All data will be lost")}.`
      });
      console.info();
      if (!confirmation.value) {
        console.info("Reset cancelled.");
        process.exit(130);
      }
    }
    const migrate = new import_Migrate.Migrate(schemaPath);
    let migrationIds;
    try {
      await migrate.reset();
      const { appliedMigrationNames } = await migrate.applyMigrations();
      migrationIds = appliedMigrationNames;
    } finally {
      migrate.stop();
    }
    if (migrationIds.length === 0) {
      console.info(`${import_chalk.default.green("Database reset successful\n")}`);
    } else {
      console.info();
      console.info(
        `${import_chalk.default.green("Database reset successful")}

The following migration(s) have been applied:

${(0, import_chalk.default)(
          (0, import_printFiles.printFilesFromMigrationIds)("migrations", migrationIds, {
            "migration.sql": ""
          })
        )}`
      );
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_GENERATE && !args["--skip-generate"]) {
      await migrate.tryToRunGenerate();
    }
    if (!process.env.PRISMA_MIGRATE_SKIP_SEED && !args["--skip-seed"]) {
      const seedCommandFromPkgJson = await (0, import_seed.getSeedCommandFromPackageJson)(process.cwd());
      if (seedCommandFromPkgJson) {
        console.info();
        const successfulSeeding = await (0, import_seed.executeSeedCommand)(seedCommandFromPkgJson);
        if (successfulSeeding) {
          console.info(`
${process.platform === "win32" ? "" : "\u{1F331}  "}The seed command has been executed.`);
        } else {
          process.exit(1);
        }
      } else {
        const schemaPath2 = await (0, import_internals.getSchemaPath)(args["--schema"]);
        await (0, import_seed.verifySeedConfigAndReturnMessage)(schemaPath2);
      }
    }
    return ``;
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateReset.help}`);
    }
    return _MigrateReset.help;
  }
};
let MigrateReset = _MigrateReset;
__name(MigrateReset, "MigrateReset");
MigrateReset.help = (0, import_internals.format)(`
Reset your database and apply all migrations, all data will be lost

${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate reset [options]

${import_chalk.default.bold("Options")}

       -h, --help   Display this help message
         --schema   Custom path to your Prisma schema
  --skip-generate   Skip triggering generators (e.g. Prisma Client)
      --skip-seed   Skip triggering seed
      -f, --force   Skip the confirmation prompt

${import_chalk.default.bold("Examples")}

  Reset your database and apply all migrations, all data will be lost
  ${import_chalk.default.dim("$")} prisma migrate reset

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate reset --schema=./schema.prisma 

  Use --force to skip the confirmation prompt
  ${import_chalk.default.dim("$")} prisma migrate reset --force
  `);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateReset
});
