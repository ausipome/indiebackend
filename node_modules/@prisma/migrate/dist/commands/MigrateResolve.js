"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MigrateResolve_exports = {};
__export(MigrateResolve_exports, {
  MigrateResolve: () => MigrateResolve
});
module.exports = __toCommonJS(MigrateResolve_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_Migrate = require("../Migrate");
var import_detectOldMigrate = require("../utils/detectOldMigrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
const _MigrateResolve = class {
  static new() {
    return new _MigrateResolve();
  }
  async parse(argv) {
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--applied": String,
        "--rolled-back": String,
        "--experimental": Boolean,
        "--early-access-feature": Boolean,
        "--schema": String,
        "--telemetry-information": String
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("migrate resolve", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithMigrateError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    if (!args["--applied"] && !args["--rolled-back"]) {
      throw new Error(
        `--applied or --rolled-back must be part of the command like:
${import_chalk.default.bold.green((0, import_internals.getCommandWithExecutor)("prisma migrate resolve --applied 20201231000000_example"))}
${import_chalk.default.bold.green((0, import_internals.getCommandWithExecutor)("prisma migrate resolve --rolled-back 20201231000000_example"))}`
      );
    } else if (args["--applied"] && args["--rolled-back"]) {
      throw new Error("Pass either --applied or --rolled-back, not both.");
    }
    if (args["--applied"]) {
      if (typeof args["--applied"] !== "string" || args["--applied"].length === 0) {
        throw new Error(
          `--applied value must be a string like ${import_chalk.default.bold.green(
            (0, import_internals.getCommandWithExecutor)("prisma migrate resolve --applied 20201231000000_example")
          )}`
        );
      }
      await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
      const migrate = new import_Migrate.Migrate(schemaPath);
      try {
        await migrate.markMigrationApplied({
          migrationId: args["--applied"]
        });
      } finally {
        migrate.stop();
      }
      return `Migration ${args["--applied"]} marked as applied.`;
    } else {
      if (typeof args["--rolled-back"] !== "string" || args["--rolled-back"].length === 0) {
        throw new Error(
          `--rolled-back value must be a string like ${import_chalk.default.bold.green(
            (0, import_internals.getCommandWithExecutor)("prisma migrate resolve --rolled-back 20201231000000_example")
          )}`
        );
      }
      await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
      const migrate = new import_Migrate.Migrate(schemaPath);
      try {
        await migrate.markMigrationRolledBack({
          migrationId: args["--rolled-back"]
        });
      } finally {
        migrate.stop();
      }
      return `Migration ${args["--rolled-back"]} marked as rolled back.`;
    }
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateResolve.help}`);
    }
    return _MigrateResolve.help;
  }
};
let MigrateResolve = _MigrateResolve;
__name(MigrateResolve, "MigrateResolve");
MigrateResolve.help = (0, import_internals.format)(`
Resolve issues with database migrations in deployment databases: 
- recover from failed migrations
- baseline databases when starting to use Prisma Migrate on existing databases
- reconcile hotfixes done manually on databases with your migration history

Run "prisma migrate status" to identify if you need to use resolve.

Read more about resolving migration history issues: ${(0, import_internals.link)("https://pris.ly/d/migrate-resolve")}
 
${import_chalk.default.bold("Usage")}

  ${import_chalk.default.dim("$")} prisma migrate resolve [options]
  
${import_chalk.default.bold("Options")}

    -h, --help   Display this help message
      --schema   Custom path to your Prisma schema
     --applied   Record a specific migration as applied
 --rolled-back   Record a specific migration as rolled back

${import_chalk.default.bold("Examples")}

  Update migrations table, recording a specific migration as applied 
  ${import_chalk.default.dim("$")} prisma migrate resolve --applied 20201231000000_add_users_table

  Update migrations table, recording a specific migration as rolled back
  ${import_chalk.default.dim("$")} prisma migrate resolve --rolled-back 20201231000000_add_users_table

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate resolve --rolled-back 20201231000000_add_users_table --schema=./schema.prisma
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateResolve
});
