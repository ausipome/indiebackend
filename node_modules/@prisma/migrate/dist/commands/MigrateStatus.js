"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var MigrateStatus_exports = {};
__export(MigrateStatus_exports, {
  MigrateStatus: () => MigrateStatus
});
module.exports = __toCommonJS(MigrateStatus_exports);
var import_debug = __toESM(require("@prisma/debug"));
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
var import_Migrate = require("../Migrate");
var import_detectOldMigrate = require("../utils/detectOldMigrate");
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
var import_flagErrors = require("../utils/flagErrors");
var import_getSchemaPathAndPrint = require("../utils/getSchemaPathAndPrint");
var import_printDatasource = require("../utils/printDatasource");
const debug = (0, import_debug.default)("prisma:migrate:status");
const _MigrateStatus = class {
  static new() {
    return new _MigrateStatus();
  }
  async parse(argv) {
    var _a, _b;
    const args = (0, import_internals.arg)(
      argv,
      {
        "--help": Boolean,
        "-h": "--help",
        "--experimental": Boolean,
        "--early-access-feature": Boolean,
        "--schema": String,
        "--telemetry-information": String
      },
      false
    );
    if ((0, import_internals.isError)(args)) {
      return this.help(args.message);
    }
    await (0, import_internals.checkUnsupportedDataProxy)("migrate status", args, true);
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      throw new import_flagErrors.ExperimentalFlagWithMigrateError();
    }
    if (args["--early-access-feature"]) {
      throw new import_flagErrors.EarlyAccessFeatureFlagWithMigrateError();
    }
    (0, import_internals.loadEnvFile)(args["--schema"], true);
    const schemaPath = await (0, import_getSchemaPathAndPrint.getSchemaPathAndPrint)(args["--schema"]);
    await (0, import_printDatasource.printDatasource)(schemaPath);
    (0, import_detectOldMigrate.throwUpgradeErrorIfOldMigrate)(schemaPath);
    const migrate = new import_Migrate.Migrate(schemaPath);
    await (0, import_ensureDatabaseExists.ensureCanConnectToDatabase)(schemaPath);
    let diagnoseResult;
    let listMigrationDirectoriesResult;
    try {
      diagnoseResult = await migrate.diagnoseMigrationHistory({
        optInToShadowDatabase: false
      });
      debug({ diagnoseResult: JSON.stringify(diagnoseResult, null, 2) });
      listMigrationDirectoriesResult = await migrate.listMigrationDirectories();
      debug({ listMigrationDirectoriesResult });
    } finally {
      migrate.stop();
    }
    console.log();
    if (listMigrationDirectoriesResult.migrations.length > 0) {
      const migrations = listMigrationDirectoriesResult.migrations;
      console.info(`${migrations.length} migration${migrations.length > 1 ? "s" : ""} found in prisma/migrations
`);
    } else {
      console.info(`No migration found in prisma/migrations
`);
    }
    let unappliedMigrations = [];
    if (((_a = diagnoseResult.history) == null ? void 0 : _a.diagnostic) === "databaseIsBehind") {
      unappliedMigrations = diagnoseResult.history.unappliedMigrationNames;
      console.info(
        `Following migration${unappliedMigrations.length > 1 ? "s" : ""} have not yet been applied:
${unappliedMigrations.join("\n")}

To apply migrations in development run ${import_chalk.default.bold.greenBright((0, import_internals.getCommandWithExecutor)(`prisma migrate dev`))}.
To apply migrations in production run ${import_chalk.default.bold.greenBright((0, import_internals.getCommandWithExecutor)(`prisma migrate deploy`))}.`
      );
      process.exit(1);
    } else if (((_b = diagnoseResult.history) == null ? void 0 : _b.diagnostic) === "historiesDiverge") {
      console.error(`Your local migration history and the migrations table from your database are different:

The last common migration is: ${diagnoseResult.history.lastCommonMigrationName}

The migration${diagnoseResult.history.unappliedMigrationNames.length > 1 ? "s" : ""} have not yet been applied:
${diagnoseResult.history.unappliedMigrationNames.join("\n")}

The migration${diagnoseResult.history.unpersistedMigrationNames.length > 1 ? "s" : ""} from the database are not found locally in prisma/migrations:
${diagnoseResult.history.unpersistedMigrationNames.join("\n")}`);
      process.exit(1);
    }
    if (!diagnoseResult.hasMigrationsTable) {
      if (listMigrationDirectoriesResult.migrations.length === 0) {
        console.error(`The current database is not managed by Prisma Migrate.
        
Read more about how to baseline an existing production database:
${(0, import_internals.link)("https://pris.ly/d/migrate-baseline")}`);
        process.exit(1);
      } else {
        const migrationId = listMigrationDirectoriesResult.migrations.shift();
        console.error(`The current database is not managed by Prisma Migrate.

If you want to keep the current database structure and data and create new migrations, baseline this database with the migration "${migrationId}":
${import_chalk.default.bold.greenBright((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --applied "${migrationId}"`))}

Read more about how to baseline an existing production database:
https://pris.ly/d/migrate-baseline`);
        process.exit(1);
      }
    } else if (diagnoseResult.failedMigrationNames.length > 0) {
      const failedMigrations = diagnoseResult.failedMigrationNames;
      console.error(
        `Following migration${failedMigrations.length > 1 ? "s" : ""} have failed:
${failedMigrations.join("\n")}

During development if the failed migration(s) have not been deployed to a production database you can then fix the migration(s) and run ${import_chalk.default.bold.greenBright(
          (0, import_internals.getCommandWithExecutor)(`prisma migrate dev`)
        )}.
`
      );
      console.error(`The failed migration(s) can be marked as rolled back or applied:
      
- If you rolled back the migration(s) manually:
${import_chalk.default.bold.greenBright((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --rolled-back "${failedMigrations[0]}"`))}

- If you fixed the database manually (hotfix):
${import_chalk.default.bold.greenBright((0, import_internals.getCommandWithExecutor)(`prisma migrate resolve --applied "${failedMigrations[0]}"`))}

Read more about how to resolve migration issues in a production database:
${(0, import_internals.link)("https://pris.ly/d/migrate-resolve")}`);
      process.exit(1);
    } else {
      console.info();
      if (unappliedMigrations.length === 0) {
        return `Database schema is up to date!`;
      }
    }
    return "";
  }
  help(error) {
    if (error) {
      return new import_internals.HelpError(`
${import_chalk.default.bold.red(`!`)} ${error}
${_MigrateStatus.help}`);
    }
    return _MigrateStatus.help;
  }
};
let MigrateStatus = _MigrateStatus;
__name(MigrateStatus, "MigrateStatus");
MigrateStatus.help = (0, import_internals.format)(`
Check the status of your database migrations

  ${import_chalk.default.bold("Usage")}

    ${import_chalk.default.dim("$")} prisma migrate status [options]
    
  ${import_chalk.default.bold("Options")}

  -h, --help   Display this help message
    --schema   Custom path to your Prisma schema

  ${import_chalk.default.bold("Examples")}

  Check the status of your database migrations
  ${import_chalk.default.dim("$")} prisma migrate status

  Specify a schema
  ${import_chalk.default.dim("$")} prisma migrate status --schema=./schema.prisma
`);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MigrateStatus
});
