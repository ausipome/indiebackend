"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var errors_exports = {};
__export(errors_exports, {
  DbNeedsForceError: () => DbNeedsForceError,
  DbPushForceFlagRenamedError: () => DbPushForceFlagRenamedError,
  DbPushIgnoreWarningsWithFlagError: () => DbPushIgnoreWarningsWithFlagError,
  MigrateDevEnvNonInteractiveError: () => MigrateDevEnvNonInteractiveError,
  MigrateNeedsForceError: () => MigrateNeedsForceError,
  MigrateResetEnvNonInteractiveError: () => MigrateResetEnvNonInteractiveError,
  NoSchemaFoundError: () => NoSchemaFoundError,
  OldMigrateDetectedError: () => OldMigrateDetectedError
});
module.exports = __toCommonJS(errors_exports);
var import_internals = require("@prisma/internals");
var import_chalk = __toESM(require("chalk"));
class NoSchemaFoundError extends Error {
  constructor() {
    super(
      `Could not find a ${import_chalk.default.bold(
        "schema.prisma"
      )} file that is required for this command.
You can either provide it with ${import_chalk.default.greenBright(
        "--schema"
      )}, set it as \`prisma.schema\` in your package.json or put it into the default location ${import_chalk.default.greenBright(
        "./prisma/schema.prisma"
      )} ${(0, import_internals.link)("https://pris.ly/d/prisma-schema-location")}`
    );
  }
}
__name(NoSchemaFoundError, "NoSchemaFoundError");
class OldMigrateDetectedError extends Error {
  constructor() {
    super(
      `The migrations folder contains migration files from an older version of Prisma Migrate which is not compatible.

Read more about how to upgrade to the new version of Migrate:
${(0, import_internals.link)("https://pris.ly/d/migrate-upgrade")}`
    );
  }
}
__name(OldMigrateDetectedError, "OldMigrateDetectedError");
class DbPushForceFlagRenamedError extends Error {
  constructor() {
    super(
      `The --force flag was renamed to --accept-data-loss in 2.17.0, use ${import_chalk.default.bold.greenBright(
        (0, import_internals.getCommandWithExecutor)("prisma db push --accept-data-loss")
      )}`
    );
  }
}
__name(DbPushForceFlagRenamedError, "DbPushForceFlagRenamedError");
class DbPushIgnoreWarningsWithFlagError extends Error {
  constructor() {
    super(
      `Use the --accept-data-loss flag to ignore the data loss warnings like ${import_chalk.default.bold.greenBright(
        (0, import_internals.getCommandWithExecutor)("prisma db push --accept-data-loss")
      )}`
    );
  }
}
__name(DbPushIgnoreWarningsWithFlagError, "DbPushIgnoreWarningsWithFlagError");
class MigrateNeedsForceError extends Error {
  constructor(subcommand) {
    super(
      `Use the --force flag to use the ${subcommand} command in an unnattended environment like ${import_chalk.default.bold.greenBright(
        (0, import_internals.getCommandWithExecutor)(`prisma migrate ${subcommand} --force`)
      )}`
    );
  }
}
__name(MigrateNeedsForceError, "MigrateNeedsForceError");
class MigrateResetEnvNonInteractiveError extends Error {
  constructor() {
    super(
      `Prisma Migrate has detected that the environment is non-interactive. It is recommended to run this command in an interactive environment.

Use ${import_chalk.default.bold.greenBright(`--force`)} to run this command without user interaction.
See ${(0, import_internals.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-reset")}`
    );
  }
}
__name(MigrateResetEnvNonInteractiveError, "MigrateResetEnvNonInteractiveError");
class MigrateDevEnvNonInteractiveError extends Error {
  constructor() {
    super(
      `Prisma Migrate has detected that the environment is non-interactive, which is not supported.

\`prisma migrate dev\` is an interactive command designed to create new migrations and evolve the database in development.
To apply existing migrations in deployments, use ${import_chalk.default.bold.greenBright(`prisma migrate deploy`)}.
See ${(0, import_internals.link)("https://www.prisma.io/docs/reference/api-reference/command-reference#migrate-deploy")}`
    );
  }
}
__name(MigrateDevEnvNonInteractiveError, "MigrateDevEnvNonInteractiveError");
class DbNeedsForceError extends Error {
  constructor(subcommand) {
    super(
      `Use the --force flag to use the ${subcommand} command in an unnattended environment like ${import_chalk.default.bold.greenBright(
        (0, import_internals.getCommandWithExecutor)(`prisma db ${subcommand} --force --preview-feature`)
      )}`
    );
  }
}
__name(DbNeedsForceError, "DbNeedsForceError");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DbNeedsForceError,
  DbPushForceFlagRenamedError,
  DbPushIgnoreWarningsWithFlagError,
  MigrateDevEnvNonInteractiveError,
  MigrateNeedsForceError,
  MigrateResetEnvNonInteractiveError,
  NoSchemaFoundError,
  OldMigrateDetectedError
});
