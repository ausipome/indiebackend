"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var flagErrors_exports = {};
__export(flagErrors_exports, {
  EarlyAccessFeatureFlagWithMigrateError: () => EarlyAccessFeatureFlagWithMigrateError,
  EarlyAcessFlagError: () => EarlyAcessFlagError,
  ExperimentalFlagError: () => ExperimentalFlagError,
  ExperimentalFlagWithMigrateError: () => ExperimentalFlagWithMigrateError,
  PreviewFlagError: () => PreviewFlagError
});
module.exports = __toCommonJS(flagErrors_exports);
var import_chalk = __toESM(require("chalk"));
class ExperimentalFlagError extends Error {
  constructor() {
    super(`Please provide the ${import_chalk.default.green("--experimental")} flag to use this command.`);
  }
}
__name(ExperimentalFlagError, "ExperimentalFlagError");
class PreviewFlagError extends Error {
  constructor() {
    super(
      `This feature is currently in Preview. There may be bugs and it's not recommended to use it in production environments.
Please provide the ${import_chalk.default.green("--preview-feature")} flag to use this command.`
    );
  }
}
__name(PreviewFlagError, "PreviewFlagError");
class EarlyAcessFlagError extends Error {
  constructor() {
    super(
      `This feature is currently in Early Access. There may be bugs and it's not recommended to use it in production environments.
Please provide the ${import_chalk.default.green("--early-access-feature")} flag to use this command.`
    );
  }
}
__name(EarlyAcessFlagError, "EarlyAcessFlagError");
class ExperimentalFlagWithMigrateError extends Error {
  constructor() {
    super(
      `Prisma Migrate was Experimental and is now Generally Available.
${import_chalk.default.yellow(
        "WARNING this new version has some breaking changes"
      )} to use it it's recommended to read the documentation first and remove the ${import_chalk.default.red("--experimental")} flag.`
    );
  }
}
__name(ExperimentalFlagWithMigrateError, "ExperimentalFlagWithMigrateError");
class EarlyAccessFeatureFlagWithMigrateError extends Error {
  constructor() {
    super(
      `Prisma Migrate was in Early Access and is now Generally Available.
Remove the ${import_chalk.default.red("--early-access-feature")} flag.`
    );
  }
}
__name(EarlyAccessFeatureFlagWithMigrateError, "EarlyAccessFeatureFlagWithMigrateError");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EarlyAccessFeatureFlagWithMigrateError,
  EarlyAcessFlagError,
  ExperimentalFlagError,
  ExperimentalFlagWithMigrateError,
  PreviewFlagError
});
