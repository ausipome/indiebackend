"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var printDatasource_exports = {};
__export(printDatasource_exports, {
  printDatasource: () => printDatasource
});
module.exports = __toCommonJS(printDatasource_exports);
var import_chalk = __toESM(require("chalk"));
var import_ensureDatabaseExists = require("../utils/ensureDatabaseExists");
async function printDatasource(schemaPath) {
  const dbInfo = await (0, import_ensureDatabaseExists.getDbInfo)(schemaPath);
  if (dbInfo.dbType) {
    if (dbInfo.dbType === "PostgreSQL" && dbInfo.dbName === void 0) {
      dbInfo.dbName = "postgres";
    }
    if (dbInfo.dbType === "SQL Server") {
      console.info(import_chalk.default.dim(`Datasource "${dbInfo.name}" - SQL Server`));
    } else {
      console.info(
        import_chalk.default.dim(
          `Datasource "${dbInfo.name}": ${dbInfo.dbType} ${dbInfo.schemaWord} "${dbInfo.dbName}"${dbInfo.schema ? `, schema "${dbInfo.schema}"` : ""} at "${dbInfo.dbLocation}"`
        )
      );
    }
  } else if (dbInfo.name) {
    console.info(import_chalk.default.dim(`Datasource "${dbInfo.name}"`));
  } else {
  }
}
__name(printDatasource, "printDatasource");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  printDatasource
});
