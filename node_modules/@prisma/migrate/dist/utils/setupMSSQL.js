"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupMSSQL_exports = {};
__export(setupMSSQL_exports, {
  setupMSSQL: () => setupMSSQL,
  tearDownMSSQL: () => tearDownMSSQL
});
module.exports = __toCommonJS(setupMSSQL_exports);
var import_fs = __toESM(require("fs"));
var import_mssql = __toESM(require("mssql"));
var import_path = __toESM(require("path"));
var import_url = require("url");
function getMSSQLConfig(url) {
  const connectionUrl = new import_url.URL(url);
  return {
    user: connectionUrl.username,
    password: connectionUrl.password,
    server: connectionUrl.hostname,
    port: Number(connectionUrl.port),
    database: connectionUrl.pathname.substring(1),
    pool: {
      max: 1
    },
    options: {
      enableArithAbort: false,
      trustServerCertificate: true
    }
  };
}
__name(getMSSQLConfig, "getMSSQLConfig");
async function setupMSSQL(options, databaseName) {
  const { connectionString } = options;
  const { dirname } = options;
  const config = getMSSQLConfig(connectionString);
  const connectionPool = new import_mssql.default.ConnectionPool(config);
  const connection = await connectionPool.connect();
  try {
    await connection.query(`
CREATE DATABASE [${databaseName}-shadowdb]
CREATE DATABASE [${databaseName}]
`);
  } catch (e) {
    console.warn(e);
  }
  if (dirname !== "") {
    let schema = `USE [${databaseName}]
`;
    schema += import_fs.default.readFileSync(import_path.default.join(dirname, "setup.sql"), "utf-8");
    await connection.query(schema);
  }
  await connection.close();
}
__name(setupMSSQL, "setupMSSQL");
async function tearDownMSSQL(options, databaseName) {
  const { connectionString } = options;
  const config = getMSSQLConfig(connectionString);
  const connectionPool = new import_mssql.default.ConnectionPool(config);
  const connection = await connectionPool.connect();
  await connection.query(`
DROP DATABASE IF EXISTS "${databaseName}-shadowdb";
DROP DATABASE IF EXISTS "${databaseName}";
`);
  await connection.close();
}
__name(tearDownMSSQL, "tearDownMSSQL");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setupMSSQL,
  tearDownMSSQL
});
