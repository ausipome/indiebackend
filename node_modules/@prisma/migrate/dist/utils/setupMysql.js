"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setupMysql_exports = {};
__export(setupMysql_exports, {
  setupMysql: () => setupMysql,
  tearDownMysql: () => tearDownMysql
});
module.exports = __toCommonJS(setupMysql_exports);
var import_internals = require("@prisma/internals");
var import_fs = __toESM(require("fs"));
var import_mariadb = __toESM(require("mariadb"));
var import_path = __toESM(require("path"));
async function setupMysql(options) {
  const { connectionString } = options;
  const { dirname } = options;
  const credentials = (0, import_internals.uriToCredentials)(connectionString);
  const dbDefault = await import_mariadb.default.createConnection({
    host: credentials.host,
    port: credentials.port,
    user: credentials.user,
    password: credentials.password,
    multipleStatements: true
  });
  await dbDefault.query(`
CREATE DATABASE IF NOT EXISTS \`${credentials.database}-shadowdb\`;
CREATE DATABASE IF NOT EXISTS \`${credentials.database}\`;
`);
  await dbDefault.end();
  if (dirname !== "") {
    const db = await import_mariadb.default.createConnection({
      host: credentials.host,
      port: credentials.port,
      database: credentials.database,
      user: credentials.user,
      password: credentials.password,
      multipleStatements: true
    });
    await db.query(import_fs.default.readFileSync(import_path.default.join(dirname, "setup.sql"), "utf-8"));
    await db.end();
  }
}
__name(setupMysql, "setupMysql");
async function tearDownMysql(options) {
  const { connectionString } = options;
  const credentials = (0, import_internals.uriToCredentials)(connectionString);
  const credentialsClone = { ...credentials };
  credentialsClone.database = "mysql";
  const db = await import_mariadb.default.createConnection({
    host: credentialsClone.host,
    port: credentialsClone.port,
    database: credentialsClone.database,
    user: credentialsClone.user,
    password: credentialsClone.password,
    multipleStatements: true
  });
  await db.query(`
    DROP DATABASE IF EXISTS \`${credentials.database}\`;
  `);
  await db.end();
}
__name(tearDownMysql, "tearDownMysql");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setupMysql,
  tearDownMysql
});
